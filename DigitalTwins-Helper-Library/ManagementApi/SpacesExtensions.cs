// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Spaces.
    /// </summary>
    public static partial class SpacesExtensions
    {
            /// <summary>
            /// Gets a list of spaces
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Optional ';' or ',' delimited list of ids to filter by
            /// </param>
            /// <param name='name'>
            /// Optional name filter
            /// </param>
            /// <param name='types'>
            /// Optional ';' or ',' delimited list of space types to filter by.
            /// </param>
            /// <param name='subtypes'>
            /// Optional ';' or ',' delimited list of space subtypes to filter by.
            /// </param>
            /// <param name='statuses'>
            /// Optional ';' or ',' delimited list of space statuses to filter by.
            /// </param>
            /// <param name='useParentSpace'>
            /// If true, spaceId represents the space's parent. Defaults to false.
            /// </param>
            /// <param name='userUpn'>
            /// Optional filter for spaces associated with the given user
            /// </param>
            /// <param name='sensorDataTypes'>
            /// Optional ';' or ',' list of types of values to retrieve when specifying
            /// Values for includes, for example "Temperature, Motion"
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Sensors,Devices".
            /// Defaults to None. Possible values include: 'None', 'ChildSpaces',
            /// 'ChildSpacesDescription', 'ChildSpacesProperties', 'ChildSpacesTypes',
            /// 'Description', 'Devices', 'DevicesDescription', 'DevicesProperties',
            /// 'DevicesSensors', 'DevicesSensorsFullPath', 'DevicesSensorsProperties',
            /// 'DevicesSensorsTypes', 'DevicesSensorsValues', 'DevicesTypes', 'FullPath',
            /// 'Location', 'Parent', 'Properties', 'Resources',
            /// 'ResourcesDependentAncestors', 'ResourcesDependentChildren', 'Sensors',
            /// 'SensorsFullPath', 'SensorsProperties', 'SensorsTypes', 'SensorsValues',
            /// 'TimeZone', 'Types', 'Users', 'UsersProperties', 'Values'
            /// </param>
            /// <param name='propertyKey'>
            /// Optional filter on objects that have the given property key defined
            /// </param>
            /// <param name='propertyValue'>
            /// Optional filter on the value of the given property key
            /// </param>
            /// <param name='propertyValueSearchType'>
            /// Optional type of search on property value. Contains or Equals. Defaults to
            /// Equals. Possible values include: 'Equals', 'Contains'
            /// </param>
            /// <param name='spaceId'>
            /// Optionally filter on objects based on their location in the topology
            /// relative to the specified spaceId
            /// </param>
            /// <param name='traverse'>
            /// None (the default) for the specified spaceId only, Down for space and
            /// descendants, Up for spaceId and ancestors, Any for both. Possible values
            /// include: 'None', 'Down', 'Up', 'Span'
            /// </param>
            /// <param name='minLevel'>
            /// Optional filter on minimum level, inclusive
            /// </param>
            /// <param name='maxLevel'>
            /// Optional filter on maximum level, inclusive
            /// </param>
            /// <param name='minRelative'>
            /// Specify if min level is absolute or relative
            /// </param>
            /// <param name='maxRelative'>
            /// Specify if max level is absolute or relative
            /// </param>
            /// <param name='filter'>
            /// Odata Filter parameter
            /// </param>
            /// <param name='orderby'>
            /// Odata OrderBy parameter
            /// </param>
            /// <param name='skip'>
            /// Odata Skip parameter
            /// </param>
            /// <param name='top'>
            /// Odata Top parameter
            /// </param>
            public static System.Collections.Generic.IList<SpaceRetrieveWithChildren> Retrieve(this ISpaces operations, string ids = default(string), string name = default(string), string types = default(string), string subtypes = default(string), string statuses = default(string), bool? useParentSpace = default(bool?), string userUpn = default(string), string sensorDataTypes = default(string), string includes = default(string), string propertyKey = default(string), string propertyValue = default(string), string propertyValueSearchType = default(string), System.Guid? spaceId = default(System.Guid?), string traverse = default(string), int? minLevel = default(int?), int? maxLevel = default(int?), bool? minRelative = default(bool?), bool? maxRelative = default(bool?), string filter = default(string), string orderby = default(string), int? skip = default(int?), int? top = default(int?))
            {
                return operations.RetrieveAsync(ids, name, types, subtypes, statuses, useParentSpace, userUpn, sensorDataTypes, includes, propertyKey, propertyValue, propertyValueSearchType, spaceId, traverse, minLevel, maxLevel, minRelative, maxRelative, filter, orderby, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of spaces
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Optional ';' or ',' delimited list of ids to filter by
            /// </param>
            /// <param name='name'>
            /// Optional name filter
            /// </param>
            /// <param name='types'>
            /// Optional ';' or ',' delimited list of space types to filter by.
            /// </param>
            /// <param name='subtypes'>
            /// Optional ';' or ',' delimited list of space subtypes to filter by.
            /// </param>
            /// <param name='statuses'>
            /// Optional ';' or ',' delimited list of space statuses to filter by.
            /// </param>
            /// <param name='useParentSpace'>
            /// If true, spaceId represents the space's parent. Defaults to false.
            /// </param>
            /// <param name='userUpn'>
            /// Optional filter for spaces associated with the given user
            /// </param>
            /// <param name='sensorDataTypes'>
            /// Optional ';' or ',' list of types of values to retrieve when specifying
            /// Values for includes, for example "Temperature, Motion"
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Sensors,Devices".
            /// Defaults to None. Possible values include: 'None', 'ChildSpaces',
            /// 'ChildSpacesDescription', 'ChildSpacesProperties', 'ChildSpacesTypes',
            /// 'Description', 'Devices', 'DevicesDescription', 'DevicesProperties',
            /// 'DevicesSensors', 'DevicesSensorsFullPath', 'DevicesSensorsProperties',
            /// 'DevicesSensorsTypes', 'DevicesSensorsValues', 'DevicesTypes', 'FullPath',
            /// 'Location', 'Parent', 'Properties', 'Resources',
            /// 'ResourcesDependentAncestors', 'ResourcesDependentChildren', 'Sensors',
            /// 'SensorsFullPath', 'SensorsProperties', 'SensorsTypes', 'SensorsValues',
            /// 'TimeZone', 'Types', 'Users', 'UsersProperties', 'Values'
            /// </param>
            /// <param name='propertyKey'>
            /// Optional filter on objects that have the given property key defined
            /// </param>
            /// <param name='propertyValue'>
            /// Optional filter on the value of the given property key
            /// </param>
            /// <param name='propertyValueSearchType'>
            /// Optional type of search on property value. Contains or Equals. Defaults to
            /// Equals. Possible values include: 'Equals', 'Contains'
            /// </param>
            /// <param name='spaceId'>
            /// Optionally filter on objects based on their location in the topology
            /// relative to the specified spaceId
            /// </param>
            /// <param name='traverse'>
            /// None (the default) for the specified spaceId only, Down for space and
            /// descendants, Up for spaceId and ancestors, Any for both. Possible values
            /// include: 'None', 'Down', 'Up', 'Span'
            /// </param>
            /// <param name='minLevel'>
            /// Optional filter on minimum level, inclusive
            /// </param>
            /// <param name='maxLevel'>
            /// Optional filter on maximum level, inclusive
            /// </param>
            /// <param name='minRelative'>
            /// Specify if min level is absolute or relative
            /// </param>
            /// <param name='maxRelative'>
            /// Specify if max level is absolute or relative
            /// </param>
            /// <param name='filter'>
            /// Odata Filter parameter
            /// </param>
            /// <param name='orderby'>
            /// Odata OrderBy parameter
            /// </param>
            /// <param name='skip'>
            /// Odata Skip parameter
            /// </param>
            /// <param name='top'>
            /// Odata Top parameter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<SpaceRetrieveWithChildren>> RetrieveAsync(this ISpaces operations, string ids = default(string), string name = default(string), string types = default(string), string subtypes = default(string), string statuses = default(string), bool? useParentSpace = default(bool?), string userUpn = default(string), string sensorDataTypes = default(string), string includes = default(string), string propertyKey = default(string), string propertyValue = default(string), string propertyValueSearchType = default(string), System.Guid? spaceId = default(System.Guid?), string traverse = default(string), int? minLevel = default(int?), int? maxLevel = default(int?), bool? minRelative = default(bool?), bool? maxRelative = default(bool?), string filter = default(string), string orderby = default(string), int? skip = default(int?), int? top = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveWithHttpMessagesAsync(ids, name, types, subtypes, statuses, useParentSpace, userUpn, sensorDataTypes, includes, propertyKey, propertyValue, propertyValueSearchType, spaceId, traverse, minLevel, maxLevel, minRelative, maxRelative, filter, orderby, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a space
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='data'>
            /// The space information
            /// </param>
            public static System.Guid? Create(this ISpaces operations, SpaceCreate data)
            {
                return operations.CreateAsync(data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a space
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='data'>
            /// The space information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Guid?> CreateAsync(this ISpaces operations, SpaceCreate data, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(data, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a specific space
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Space Id
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Sensors,Devices".
            /// Defaults to None. Possible values include: 'None', 'ChildSpaces',
            /// 'ChildSpacesDescription', 'ChildSpacesProperties', 'ChildSpacesTypes',
            /// 'Description', 'Devices', 'DevicesDescription', 'DevicesProperties',
            /// 'DevicesSensors', 'DevicesSensorsFullPath', 'DevicesSensorsProperties',
            /// 'DevicesSensorsTypes', 'DevicesSensorsValues', 'DevicesTypes', 'FullPath',
            /// 'Location', 'Parent', 'Properties', 'Resources',
            /// 'ResourcesDependentAncestors', 'ResourcesDependentChildren', 'Sensors',
            /// 'SensorsFullPath', 'SensorsProperties', 'SensorsTypes', 'SensorsValues',
            /// 'TimeZone', 'Types', 'Users', 'UsersProperties', 'Values'
            /// </param>
            /// <param name='sensorDataTypes'>
            /// Optional ';' or ',' list of types of values to retrieve when specifying
            /// Values for includes, for example "Temperature, Motion"
            /// </param>
            public static SpaceRetrieveWithChildren RetrieveById(this ISpaces operations, System.Guid id, string includes = default(string), string sensorDataTypes = default(string))
            {
                return operations.RetrieveByIdAsync(id, includes, sensorDataTypes).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific space
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Space Id
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Sensors,Devices".
            /// Defaults to None. Possible values include: 'None', 'ChildSpaces',
            /// 'ChildSpacesDescription', 'ChildSpacesProperties', 'ChildSpacesTypes',
            /// 'Description', 'Devices', 'DevicesDescription', 'DevicesProperties',
            /// 'DevicesSensors', 'DevicesSensorsFullPath', 'DevicesSensorsProperties',
            /// 'DevicesSensorsTypes', 'DevicesSensorsValues', 'DevicesTypes', 'FullPath',
            /// 'Location', 'Parent', 'Properties', 'Resources',
            /// 'ResourcesDependentAncestors', 'ResourcesDependentChildren', 'Sensors',
            /// 'SensorsFullPath', 'SensorsProperties', 'SensorsTypes', 'SensorsValues',
            /// 'TimeZone', 'Types', 'Users', 'UsersProperties', 'Values'
            /// </param>
            /// <param name='sensorDataTypes'>
            /// Optional ';' or ',' list of types of values to retrieve when specifying
            /// Values for includes, for example "Temperature, Motion"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SpaceRetrieveWithChildren> RetrieveByIdAsync(this ISpaces operations, System.Guid id, string includes = default(string), string sensorDataTypes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveByIdWithHttpMessagesAsync(id, includes, sensorDataTypes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a space and its children, such as devices, sensors, users, ...
            /// </summary>
            /// <remarks>
            /// Deleting a space will fail if one of these objects belongs in the space
            /// tree about to be deleted:
            /// - Space resource: These need to be deleted first.
            /// - Sensors attached to devices that do **not** belong in the space tree
            /// about to be deleted: these (or their parent device) need to be deleted
            /// first.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Space Id
            /// </param>
            public static void Delete(this ISpaces operations, System.Guid id)
            {
                operations.DeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a space and its children, such as devices, sensors, users, ...
            /// </summary>
            /// <remarks>
            /// Deleting a space will fail if one of these objects belongs in the space
            /// tree about to be deleted:
            /// - Space resource: These need to be deleted first.
            /// - Sensors attached to devices that do **not** belong in the space tree
            /// about to be deleted: these (or their parent device) need to be deleted
            /// first.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Space Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this ISpaces operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a space
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Space Id
            /// </param>
            /// <param name='data'>
            /// The space information
            /// </param>
            public static void Update(this ISpaces operations, System.Guid id, SpaceUpdate data)
            {
                operations.UpdateAsync(id, data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a space
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Space Id
            /// </param>
            /// <param name='data'>
            /// The space information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task UpdateAsync(this ISpaces operations, System.Guid id, SpaceUpdate data, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.UpdateWithHttpMessagesAsync(id, data, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the first space of the given type by walking up the spaces hierarchy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Space Id
            /// </param>
            /// <param name='spaceType'>
            /// The parent space type
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Sensors,Devices".
            /// Defaults to None. Possible values include: 'None', 'ChildSpaces',
            /// 'ChildSpacesDescription', 'ChildSpacesProperties', 'ChildSpacesTypes',
            /// 'Description', 'Devices', 'DevicesDescription', 'DevicesProperties',
            /// 'DevicesSensors', 'DevicesSensorsFullPath', 'DevicesSensorsProperties',
            /// 'DevicesSensorsTypes', 'DevicesSensorsValues', 'DevicesTypes', 'FullPath',
            /// 'Location', 'Parent', 'Properties', 'Resources',
            /// 'ResourcesDependentAncestors', 'ResourcesDependentChildren', 'Sensors',
            /// 'SensorsFullPath', 'SensorsProperties', 'SensorsTypes', 'SensorsValues',
            /// 'TimeZone', 'Types', 'Users', 'UsersProperties', 'Values'
            /// </param>
            /// <param name='sensorDataTypes'>
            /// Optional ';' or ',' list of types of values to retrieve when specifying
            /// Values for includes, for example "Temperature, Motion"
            /// </param>
            public static SpaceRetrieveWithChildren RetrieveParent(this ISpaces operations, System.Guid id, string spaceType, string includes = default(string), string sensorDataTypes = default(string))
            {
                return operations.RetrieveParentAsync(id, spaceType, includes, sensorDataTypes).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the first space of the given type by walking up the spaces hierarchy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Space Id
            /// </param>
            /// <param name='spaceType'>
            /// The parent space type
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Sensors,Devices".
            /// Defaults to None. Possible values include: 'None', 'ChildSpaces',
            /// 'ChildSpacesDescription', 'ChildSpacesProperties', 'ChildSpacesTypes',
            /// 'Description', 'Devices', 'DevicesDescription', 'DevicesProperties',
            /// 'DevicesSensors', 'DevicesSensorsFullPath', 'DevicesSensorsProperties',
            /// 'DevicesSensorsTypes', 'DevicesSensorsValues', 'DevicesTypes', 'FullPath',
            /// 'Location', 'Parent', 'Properties', 'Resources',
            /// 'ResourcesDependentAncestors', 'ResourcesDependentChildren', 'Sensors',
            /// 'SensorsFullPath', 'SensorsProperties', 'SensorsTypes', 'SensorsValues',
            /// 'TimeZone', 'Types', 'Users', 'UsersProperties', 'Values'
            /// </param>
            /// <param name='sensorDataTypes'>
            /// Optional ';' or ',' list of types of values to retrieve when specifying
            /// Values for includes, for example "Temperature, Motion"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SpaceRetrieveWithChildren> RetrieveParentAsync(this ISpaces operations, System.Guid id, string spaceType, string includes = default(string), string sensorDataTypes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveParentWithHttpMessagesAsync(id, spaceType, includes, sensorDataTypes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the first keystore by walking up the spaces hierarchy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Space Id
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Space,Keys". Defaults
            /// to None. Possible values include: 'None', 'Description', 'FullPath',
            /// 'Keys', 'Space'
            /// </param>
            public static KeyStoreRetrieve RetrieveKeyStore(this ISpaces operations, System.Guid id, string includes = default(string))
            {
                return operations.RetrieveKeyStoreAsync(id, includes).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the first keystore by walking up the spaces hierarchy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Space Id
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Space,Keys". Defaults
            /// to None. Possible values include: 'None', 'Description', 'FullPath',
            /// 'Keys', 'Space'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KeyStoreRetrieve> RetrieveKeyStoreAsync(this ISpaces operations, System.Guid id, string includes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveKeyStoreWithHttpMessagesAsync(id, includes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of users associated with the given space
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Space Id
            /// </param>
            /// <param name='traverse'>
            /// Optionally specify if you want to recursively include children (Down) or
            /// ancestors (Up) of the specified space Id. Possible values include: 'None',
            /// 'Down', 'Up', 'Span'
            /// </param>
            /// <param name='unmapped'>
            /// Optionally filter on mapped or unmapped users
            /// </param>
            /// <param name='firstName'>
            /// Optional filter on first name
            /// </param>
            /// <param name='lastName'>
            /// Optional filter on last name
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Space". Defaults to
            /// None. Possible values include: 'None', 'FullPath', 'Location',
            /// 'Properties', 'RoleAssignments', 'Space'
            /// </param>
            /// <param name='propertyKey'>
            /// Optional filter on objects that have the given property key defined
            /// </param>
            /// <param name='propertyValue'>
            /// Optional filter on the value of the given property key
            /// </param>
            /// <param name='propertyValueSearchType'>
            /// Optional type of search on property value. Contains or Equals. Defaults to
            /// Equals. Possible values include: 'Equals', 'Contains'
            /// </param>
            /// <param name='filter'>
            /// Odata Filter parameter
            /// </param>
            /// <param name='orderby'>
            /// Odata OrderBy parameter
            /// </param>
            /// <param name='skip'>
            /// Odata Skip parameter
            /// </param>
            /// <param name='top'>
            /// Odata Top parameter
            /// </param>
            public static System.Collections.Generic.IList<UserRetrieve> RetrieveUsers(this ISpaces operations, System.Guid id, string traverse = default(string), bool? unmapped = default(bool?), string firstName = default(string), string lastName = default(string), string includes = default(string), string propertyKey = default(string), string propertyValue = default(string), string propertyValueSearchType = default(string), string filter = default(string), string orderby = default(string), int? skip = default(int?), int? top = default(int?))
            {
                return operations.RetrieveUsersAsync(id, traverse, unmapped, firstName, lastName, includes, propertyKey, propertyValue, propertyValueSearchType, filter, orderby, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of users associated with the given space
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Space Id
            /// </param>
            /// <param name='traverse'>
            /// Optionally specify if you want to recursively include children (Down) or
            /// ancestors (Up) of the specified space Id. Possible values include: 'None',
            /// 'Down', 'Up', 'Span'
            /// </param>
            /// <param name='unmapped'>
            /// Optionally filter on mapped or unmapped users
            /// </param>
            /// <param name='firstName'>
            /// Optional filter on first name
            /// </param>
            /// <param name='lastName'>
            /// Optional filter on last name
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Space". Defaults to
            /// None. Possible values include: 'None', 'FullPath', 'Location',
            /// 'Properties', 'RoleAssignments', 'Space'
            /// </param>
            /// <param name='propertyKey'>
            /// Optional filter on objects that have the given property key defined
            /// </param>
            /// <param name='propertyValue'>
            /// Optional filter on the value of the given property key
            /// </param>
            /// <param name='propertyValueSearchType'>
            /// Optional type of search on property value. Contains or Equals. Defaults to
            /// Equals. Possible values include: 'Equals', 'Contains'
            /// </param>
            /// <param name='filter'>
            /// Odata Filter parameter
            /// </param>
            /// <param name='orderby'>
            /// Odata OrderBy parameter
            /// </param>
            /// <param name='skip'>
            /// Odata Skip parameter
            /// </param>
            /// <param name='top'>
            /// Odata Top parameter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<UserRetrieve>> RetrieveUsersAsync(this ISpaces operations, System.Guid id, string traverse = default(string), bool? unmapped = default(bool?), string firstName = default(string), string lastName = default(string), string includes = default(string), string propertyKey = default(string), string propertyValue = default(string), string propertyValueSearchType = default(string), string filter = default(string), string orderby = default(string), int? skip = default(int?), int? top = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveUsersWithHttpMessagesAsync(id, traverse, unmapped, firstName, lastName, includes, propertyKey, propertyValue, propertyValueSearchType, filter, orderby, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds or updates a user associated to the given space
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Space Id
            /// </param>
            /// <param name='data'>
            /// The user's data
            /// </param>
            public static string CreateOrUpdateUser(this ISpaces operations, System.Guid id, UserCreate data)
            {
                return operations.CreateOrUpdateUserAsync(id, data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds or updates a user associated to the given space
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Space Id
            /// </param>
            /// <param name='data'>
            /// The user's data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<string> CreateOrUpdateUserAsync(this ISpaces operations, System.Guid id, UserCreate data, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateUserWithHttpMessagesAsync(id, data, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Moves the users with provided UPNs from one space to another
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Space Id where the users are currently associated
            /// </param>
            /// <param name='toSpaceId'>
            /// Space Id where the users have to be moved to
            /// </param>
            /// <param name='users'>
            /// List of users who need to be re-assigned
            /// </param>
            /// <param name='resetLocation'>
            /// If true reset locations not defined in payload
            /// </param>
            public static object MoveUsersToSpace(this ISpaces operations, System.Guid id, System.Guid toSpaceId, System.Collections.Generic.IList<UserCreate> users, bool? resetLocation = false)
            {
                return operations.MoveUsersToSpaceAsync(id, toSpaceId, users, resetLocation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Moves the users with provided UPNs from one space to another
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Space Id where the users are currently associated
            /// </param>
            /// <param name='toSpaceId'>
            /// Space Id where the users have to be moved to
            /// </param>
            /// <param name='users'>
            /// List of users who need to be re-assigned
            /// </param>
            /// <param name='resetLocation'>
            /// If true reset locations not defined in payload
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> MoveUsersToSpaceAsync(this ISpaces operations, System.Guid id, System.Guid toSpaceId, System.Collections.Generic.IList<UserCreate> users, bool? resetLocation = false, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.MoveUsersToSpaceWithHttpMessagesAsync(id, toSpaceId, users, resetLocation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a user in the given space
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Space Id
            /// </param>
            /// <param name='upn'>
            /// The user's UPN
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Space". Defaults to
            /// None. Possible values include: 'None', 'FullPath', 'Location',
            /// 'Properties', 'RoleAssignments', 'Space'
            /// </param>
            public static UserRetrieve RetrieveUserByUpn(this ISpaces operations, System.Guid id, string upn, string includes = default(string))
            {
                return operations.RetrieveUserByUpnAsync(id, upn, includes).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a user in the given space
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Space Id
            /// </param>
            /// <param name='upn'>
            /// The user's UPN
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Space". Defaults to
            /// None. Possible values include: 'None', 'FullPath', 'Location',
            /// 'Properties', 'RoleAssignments', 'Space'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<UserRetrieve> RetrieveUserByUpnAsync(this ISpaces operations, System.Guid id, string upn, string includes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveUserByUpnWithHttpMessagesAsync(id, upn, includes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a user from the given space
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Space Id
            /// </param>
            /// <param name='upn'>
            /// The user's UPN
            /// </param>
            public static void DeleteUser(this ISpaces operations, System.Guid id, string upn)
            {
                operations.DeleteUserAsync(id, upn).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a user from the given space
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Space Id
            /// </param>
            /// <param name='upn'>
            /// The user's UPN
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteUserAsync(this ISpaces operations, System.Guid id, string upn, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeleteUserWithHttpMessagesAsync(id, upn, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the first resource of the given type by walking up the spaces
            /// hierarchy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The space id
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example
            /// "Space,DependentChildren". Defaults to None. Possible values include:
            /// 'None', 'DependentAncestors', 'DependentChildren', 'FullPath', 'Space'
            /// </param>
            public static SpaceResourceRetrieve RetrieveResource(this ISpaces operations, System.Guid id, string includes = default(string))
            {
                return operations.RetrieveResourceAsync(id, includes).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the first resource of the given type by walking up the spaces
            /// hierarchy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The space id
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example
            /// "Space,DependentChildren". Defaults to None. Possible values include:
            /// 'None', 'DependentAncestors', 'DependentChildren', 'FullPath', 'Space'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SpaceResourceRetrieve> RetrieveResourceAsync(this ISpaces operations, System.Guid id, string includes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveResourceWithHttpMessagesAsync(id, includes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the aggregate of the values of the child sensors of the given type
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier
            /// </param>
            /// <param name='sensorDataTypes'>
            /// Optional ';' or ',' list of types of values to retrieve when specifying
            /// Values for includes, for example "Temperature, Motion"
            /// </param>
            public static System.Collections.Generic.IList<SensorValue> GetValue(this ISpaces operations, System.Guid id, string sensorDataTypes = default(string))
            {
                return operations.GetValueAsync(id, sensorDataTypes).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the aggregate of the values of the child sensors of the given type
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier
            /// </param>
            /// <param name='sensorDataTypes'>
            /// Optional ';' or ',' list of types of values to retrieve when specifying
            /// Values for includes, for example "Temperature, Motion"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<SensorValue>> GetValueAsync(this ISpaces operations, System.Guid id, string sensorDataTypes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetValueWithHttpMessagesAsync(id, sensorDataTypes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of blobs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='names'>
            /// Optional ';' or ',' delimited list of blob names to filter by
            /// </param>
            /// <param name='ids'>
            /// Optional ';' or ',' delimited list of ids to filter by
            /// </param>
            /// <param name='sharings'>
            /// Optional ';' or ',' delimited list of Sharing modes to filter by
            /// </param>
            /// <param name='types'>
            /// Optional ';' or ',' delimited list of types to filter by
            /// </param>
            /// <param name='subtypes'>
            /// Optional ';' or ',' delimited list of subtypes to filter by
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example
            /// "ContentInfo,Description". Defaults to None. Possible values include:
            /// 'None', 'ContentInfo', 'Description', 'FullPath', 'Types'
            /// </param>
            /// <param name='spaceId'>
            /// Optionally filter on objects based on their location in the topology
            /// relative to the specified spaceId
            /// </param>
            /// <param name='traverse'>
            /// None (the default) for the specified spaceId only, Down for space and
            /// descendants, Up for spaceId and ancestors, Any for both. Possible values
            /// include: 'None', 'Down', 'Up', 'Span'
            /// </param>
            /// <param name='minLevel'>
            /// Optional filter on minimum level, inclusive
            /// </param>
            /// <param name='maxLevel'>
            /// Optional filter on maximum level, inclusive
            /// </param>
            /// <param name='minRelative'>
            /// Specify if min level is absolute or relative
            /// </param>
            /// <param name='maxRelative'>
            /// Specify if max level is absolute or relative
            /// </param>
            /// <param name='filter'>
            /// Odata Filter parameter
            /// </param>
            /// <param name='orderby'>
            /// Odata OrderBy parameter
            /// </param>
            /// <param name='skip'>
            /// Odata Skip parameter
            /// </param>
            /// <param name='top'>
            /// Odata Top parameter
            /// </param>
            public static System.Collections.Generic.IList<BlobMetadataRetrieve> RetrieveBlobMetadata(this ISpaces operations, string names = default(string), string ids = default(string), string sharings = default(string), string types = default(string), string subtypes = default(string), string includes = default(string), System.Guid? spaceId = default(System.Guid?), string traverse = default(string), int? minLevel = default(int?), int? maxLevel = default(int?), bool? minRelative = default(bool?), bool? maxRelative = default(bool?), string filter = default(string), string orderby = default(string), int? skip = default(int?), int? top = default(int?))
            {
                return operations.RetrieveBlobMetadataAsync(names, ids, sharings, types, subtypes, includes, spaceId, traverse, minLevel, maxLevel, minRelative, maxRelative, filter, orderby, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of blobs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='names'>
            /// Optional ';' or ',' delimited list of blob names to filter by
            /// </param>
            /// <param name='ids'>
            /// Optional ';' or ',' delimited list of ids to filter by
            /// </param>
            /// <param name='sharings'>
            /// Optional ';' or ',' delimited list of Sharing modes to filter by
            /// </param>
            /// <param name='types'>
            /// Optional ';' or ',' delimited list of types to filter by
            /// </param>
            /// <param name='subtypes'>
            /// Optional ';' or ',' delimited list of subtypes to filter by
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example
            /// "ContentInfo,Description". Defaults to None. Possible values include:
            /// 'None', 'ContentInfo', 'Description', 'FullPath', 'Types'
            /// </param>
            /// <param name='spaceId'>
            /// Optionally filter on objects based on their location in the topology
            /// relative to the specified spaceId
            /// </param>
            /// <param name='traverse'>
            /// None (the default) for the specified spaceId only, Down for space and
            /// descendants, Up for spaceId and ancestors, Any for both. Possible values
            /// include: 'None', 'Down', 'Up', 'Span'
            /// </param>
            /// <param name='minLevel'>
            /// Optional filter on minimum level, inclusive
            /// </param>
            /// <param name='maxLevel'>
            /// Optional filter on maximum level, inclusive
            /// </param>
            /// <param name='minRelative'>
            /// Specify if min level is absolute or relative
            /// </param>
            /// <param name='maxRelative'>
            /// Specify if max level is absolute or relative
            /// </param>
            /// <param name='filter'>
            /// Odata Filter parameter
            /// </param>
            /// <param name='orderby'>
            /// Odata OrderBy parameter
            /// </param>
            /// <param name='skip'>
            /// Odata Skip parameter
            /// </param>
            /// <param name='top'>
            /// Odata Top parameter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<BlobMetadataRetrieve>> RetrieveBlobMetadataAsync(this ISpaces operations, string names = default(string), string ids = default(string), string sharings = default(string), string types = default(string), string subtypes = default(string), string includes = default(string), System.Guid? spaceId = default(System.Guid?), string traverse = default(string), int? minLevel = default(int?), int? maxLevel = default(int?), bool? minRelative = default(bool?), bool? maxRelative = default(bool?), string filter = default(string), string orderby = default(string), int? skip = default(int?), int? top = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveBlobMetadataWithHttpMessagesAsync(names, ids, sharings, types, subtypes, includes, spaceId, traverse, minLevel, maxLevel, minRelative, maxRelative, filter, orderby, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a blob
            /// </summary>
            /// <remarks>
            /// This is a multi-part request. For more information, see sample app or doc
            /// examples.
            /// Key value pairs specified in the Content-Disposition header in the
            /// blob-chunk of the multipart request will be preserved as meta-data on the
            /// stored blob.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='metadata'>
            /// The mime type of this parameter is "application/json" and its schema is
            /// #/definitions/BlobMetadataCreate
            /// </param>
            public static System.Guid? CreateBlob(this ISpaces operations, string metadata)
            {
                return operations.CreateBlobAsync(metadata).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a blob
            /// </summary>
            /// <remarks>
            /// This is a multi-part request. For more information, see sample app or doc
            /// examples.
            /// Key value pairs specified in the Content-Disposition header in the
            /// blob-chunk of the multipart request will be preserved as meta-data on the
            /// stored blob.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='metadata'>
            /// The mime type of this parameter is "application/json" and its schema is
            /// #/definitions/BlobMetadataCreate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Guid?> CreateBlobAsync(this ISpaces operations, string metadata, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateBlobWithHttpMessagesAsync(metadata, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a blob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Blob Id
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example
            /// "ContentInfo,Description". Defaults to None. Possible values include:
            /// 'None', 'ContentInfo', 'Description', 'FullPath', 'Types'
            /// </param>
            public static BlobMetadataRetrieve RetrieveBlobMetadataById(this ISpaces operations, System.Guid id, string includes = default(string))
            {
                return operations.RetrieveBlobMetadataByIdAsync(id, includes).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a blob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Blob Id
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example
            /// "ContentInfo,Description". Defaults to None. Possible values include:
            /// 'None', 'ContentInfo', 'Description', 'FullPath', 'Types'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<BlobMetadataRetrieve> RetrieveBlobMetadataByIdAsync(this ISpaces operations, System.Guid id, string includes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveBlobMetadataByIdWithHttpMessagesAsync(id, includes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a blob
            /// </summary>
            /// <remarks>
            /// Deleting a blob will delete its metadata, its content (all versions) and
            /// its associations
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Blob Id
            /// </param>
            public static void DeleteBlob(this ISpaces operations, System.Guid id)
            {
                operations.DeleteBlobAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a blob
            /// </summary>
            /// <remarks>
            /// Deleting a blob will delete its metadata, its content (all versions) and
            /// its associations
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Blob Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteBlobAsync(this ISpaces operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeleteBlobWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a blob
            /// </summary>
            /// <remarks>
            /// This is a multi-part request. For more information, see sample app or doc
            /// examples.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// blob Id
            /// </param>
            /// <param name='metadata'>
            /// The mime type of this parameter is "application/json" and its schema is
            /// #/definitions/BlobMetadataUpdate
            /// </param>
            public static void UpdateBlob(this ISpaces operations, System.Guid id, string metadata)
            {
                operations.UpdateBlobAsync(id, metadata).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a blob
            /// </summary>
            /// <remarks>
            /// This is a multi-part request. For more information, see sample app or doc
            /// examples.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// blob Id
            /// </param>
            /// <param name='metadata'>
            /// The mime type of this parameter is "application/json" and its schema is
            /// #/definitions/BlobMetadataUpdate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task UpdateBlobAsync(this ISpaces operations, System.Guid id, string metadata, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.UpdateBlobWithHttpMessagesAsync(id, metadata, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the contents of the given version of the given blob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// blob id
            /// </param>
            /// <param name='version'>
            /// blob content version
            /// </param>
            public static System.IO.Stream GetBlobContents(this ISpaces operations, System.Guid id, long version)
            {
                return operations.GetBlobContentsAsync(id, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the contents of the given version of the given blob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// blob id
            /// </param>
            /// <param name='version'>
            /// blob content version
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.IO.Stream> GetBlobContentsAsync(this ISpaces operations, System.Guid id, long version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                var _result = await operations.GetBlobContentsWithHttpMessagesAsync(id, version, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Delete the contents of the given version of the given blob
            /// </summary>
            /// <remarks>
            /// Delete will fail if this version has any associations
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// blob id
            /// </param>
            /// <param name='version'>
            /// blob version
            /// </param>
            public static void DeleteBlobContents(this ISpaces operations, System.Guid id, long version)
            {
                operations.DeleteBlobContentsAsync(id, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the contents of the given version of the given blob
            /// </summary>
            /// <remarks>
            /// Delete will fail if this version has any associations
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// blob id
            /// </param>
            /// <param name='version'>
            /// blob version
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteBlobContentsAsync(this ISpaces operations, System.Guid id, long version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeleteBlobContentsWithHttpMessagesAsync(id, version, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the contents of the latest version of the given blob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// blob id
            /// </param>
            public static System.IO.Stream GetLatestBlobContents(this ISpaces operations, System.Guid id)
            {
                return operations.GetLatestBlobContentsAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the contents of the latest version of the given blob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// blob id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.IO.Stream> GetLatestBlobContentsAsync(this ISpaces operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                var _result = await operations.GetLatestBlobContentsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Gets the value of a property
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Parent Id
            /// </param>
            /// <param name='name'>
            /// Property name
            /// </param>
            public static string RetrieveProperty(this ISpaces operations, System.Guid id, string name)
            {
                return operations.RetrievePropertyAsync(id, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the value of a property
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Parent Id
            /// </param>
            /// <param name='name'>
            /// Property name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<string> RetrievePropertyAsync(this ISpaces operations, System.Guid id, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrievePropertyWithHttpMessagesAsync(id, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the given property value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Parent Id
            /// </param>
            /// <param name='name'>
            /// Property name
            /// </param>
            public static void DeleteProperty(this ISpaces operations, System.Guid id, string name)
            {
                operations.DeletePropertyAsync(id, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the given property value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Parent Id
            /// </param>
            /// <param name='name'>
            /// Property name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeletePropertyAsync(this ISpaces operations, System.Guid id, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeletePropertyWithHttpMessagesAsync(id, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates property values
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Parent Id
            /// </param>
            /// <param name='data'>
            /// The properties
            /// </param>
            public static object UpdateProperties(this ISpaces operations, System.Guid id, System.Collections.Generic.IList<ExtendedPropertyCreate> data)
            {
                return operations.UpdatePropertiesAsync(id, data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates property values
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Parent Id
            /// </param>
            /// <param name='data'>
            /// The properties
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> UpdatePropertiesAsync(this ISpaces operations, System.Guid id, System.Collections.Generic.IList<ExtendedPropertyCreate> data, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdatePropertiesWithHttpMessagesAsync(id, data, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a property value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Parent Id
            /// </param>
            /// <param name='data'>
            /// Extended property data
            /// </param>
            public static string CreateProperty(this ISpaces operations, System.Guid id, ExtendedPropertyCreate data)
            {
                return operations.CreatePropertyAsync(id, data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a property value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Parent Id
            /// </param>
            /// <param name='data'>
            /// Extended property data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<string> CreatePropertyAsync(this ISpaces operations, System.Guid id, ExtendedPropertyCreate data, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreatePropertyWithHttpMessagesAsync(id, data, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes all property values
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Parent Id
            /// </param>
            public static void DeleteProperties(this ISpaces operations, System.Guid id)
            {
                operations.DeletePropertiesAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes all property values
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Parent Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeletePropertiesAsync(this ISpaces operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeletePropertiesWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
