// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// PropertyKeys operations.
    /// </summary>
    public partial interface IPropertyKeys
    {
        /// <summary>
        /// Retrieves property keys
        /// </summary>
        /// <param name='scope'>
        /// Optional scope filter. Possible values include: 'Spaces',
        /// 'Sensors', 'Users', 'Devices'
        /// </param>
        /// <param name='category'>
        /// Optional category filter
        /// </param>
        /// <param name='includes'>
        /// Comma separated list of what to include, for example "Space".
        /// Defaults to None. Possible values include: 'None', 'Description',
        /// 'FullPath', 'Space'
        /// </param>
        /// <param name='spaceId'>
        /// Optionally filter on objects based on their location in the
        /// topology relative to the specified spaceId
        /// </param>
        /// <param name='traverse'>
        /// None (the default) for the specified spaceId only, Down for space
        /// and descendants, Up for spaceId and ancestors, Any for both.
        /// Possible values include: 'None', 'Down', 'Up', 'Span'
        /// </param>
        /// <param name='minLevel'>
        /// Optional filter on minimum level, inclusive
        /// </param>
        /// <param name='maxLevel'>
        /// Optional filter on maximum level, inclusive
        /// </param>
        /// <param name='minRelative'>
        /// Specify if min level is absolute or relative
        /// </param>
        /// <param name='maxRelative'>
        /// Specify if max level is absolute or relative
        /// </param>
        /// <param name='filter'>
        /// Odata Filter parameter
        /// </param>
        /// <param name='orderby'>
        /// Odata OrderBy parameter
        /// </param>
        /// <param name='skip'>
        /// Odata Skip parameter
        /// </param>
        /// <param name='top'>
        /// Odata Top parameter
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse<System.Collections.Generic.IList<ExtendedPropertyKeyRetrieve>>> RetrieveWithHttpMessagesAsync(string scope = default(string), string category = default(string), string includes = default(string), System.Guid? spaceId = default(System.Guid?), string traverse = default(string), int? minLevel = default(int?), int? maxLevel = default(int?), bool? minRelative = default(bool?), bool? maxRelative = default(bool?), string filter = default(string), string orderby = default(string), int? skip = default(int?), int? top = default(int?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Adds or updates a property key using SpaceId, Name and Scope as
        /// lookup keys
        /// </summary>
        /// <param name='data'>
        /// The property key information
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse<int?>> CreateOrUpdateWithHttpMessagesAsync(ExtendedPropertyKeyCreate data, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a property key
        /// </summary>
        /// <param name='data'>
        /// The property key information
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse<int?>> CreateWithHttpMessagesAsync(ExtendedPropertyKeyCreate data, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes property keys for child objects of the given space
        /// </summary>
        /// <param name='spaceId'>
        /// Space Id
        /// </param>
        /// <param name='scope'>
        /// Scope for the property keys. Possible values include: 'Spaces',
        /// 'Sensors', 'Users', 'Devices'
        /// </param>
        /// <param name='keys'>
        /// ';' delimited list of names of property keys to delete
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse> DeleteBySpaceWithHttpMessagesAsync(System.Guid spaceId, string scope, string keys, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a property key
        /// </summary>
        /// <param name='id'>
        /// Key identifier
        /// </param>
        /// <param name='includes'>
        /// Comma separated list of what to include, for example "Space".
        /// Defaults to None. Possible values include: 'None', 'Description',
        /// 'FullPath', 'Space'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse<ExtendedPropertyKeyRetrieve>> RetrieveByIdWithHttpMessagesAsync(int id, string includes = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes the given property key
        /// </summary>
        /// <param name='id'>
        /// Key identifier
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse> DeleteWithHttpMessagesAsync(int id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a property key
        /// </summary>
        /// <param name='id'>
        /// The property key Id
        /// </param>
        /// <param name='data'>
        /// The property key information
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse> UpdateWithHttpMessagesAsync(int id, ExtendedPropertyKeyUpdate data, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}
