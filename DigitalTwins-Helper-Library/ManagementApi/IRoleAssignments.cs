// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// RoleAssignments operations.
    /// </summary>
    public partial interface IRoleAssignments
    {
        /// <summary>
        /// Checks permissions for a given path, user, domain, tenant id,
        /// accessType and resource type
        /// </summary>
        /// <param name='path'>
        /// The path
        /// </param>
        /// <param name='userId'>
        /// The AAD user ObjectId
        /// </param>
        /// <param name='accessType'>
        /// The access type. Possible values include: 'None', 'Read', 'Create',
        /// 'Update', 'Delete'
        /// </param>
        /// <param name='resourceType'>
        /// The resource type. Possible values include: 'None', 'Device',
        /// 'DeviceBlobMetadata', 'DeviceExtendedProperty',
        /// 'ExtendedPropertyKey', 'ExtendedType', 'Endpoint', 'KeyStore',
        /// 'Matcher', 'Ontology', 'Report', 'RoleDefinition', 'Sensor',
        /// 'SensorExtendedProperty', 'Space', 'SpaceBlobMetadata',
        /// 'SpaceExtendedProperty', 'SpaceResource', 'SpaceRoleAssignment',
        /// 'System', 'UserDefinedFunction', 'User', 'UserBlobMetadata',
        /// 'UserExtendedProperty'
        /// </param>
        /// <param name='domain'>
        /// The domain to check preceded by the '@' character, or the upn that
        /// belongs to the user. Examples: `user@example.com`, `@example.com`
        /// </param>
        /// <param name='tenantId'>
        /// The AAD tenantId of the user, disallowed for GatewayDevice role
        /// assignments
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse<bool?>> CheckWithHttpMessagesAsync(string path, System.Guid userId, string accessType, string resourceType, string domain = "", System.Guid? tenantId = default(System.Guid?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets role assignments under a given path
        /// </summary>
        /// <param name='path'>
        /// The path under which role assignments are searched
        /// </param>
        /// <param name='objectId'>
        /// Optional object id filter. This corresponds to an object id used in
        /// a role assignment creation.
        /// </param>
        /// <param name='personal'>
        /// Optionally make the search return only the role assignments that
        /// are applicable to the user sending the request
        /// </param>
        /// <param name='traverse'>
        /// Optionally specify if you want to recursively include children
        /// (Down) of the specified path. Other traversal directions are not
        /// supported. Possible values include: 'None', 'Down', 'Up', 'Span'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse<System.Collections.Generic.IList<RoleAssignmentRetrieve>>> RetrieveWithHttpMessagesAsync(string path, string objectId = default(string), bool? personal = default(bool?), string traverse = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a role assignment
        /// </summary>
        /// <param name='data'>
        /// The role assignment information.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse<System.Guid?>> CreateWithHttpMessagesAsync(RoleAssignmentCreate data, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a role assignment
        /// </summary>
        /// <param name='id'>
        /// Role assignment id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse> DeleteWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}
