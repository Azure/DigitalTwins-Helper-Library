// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Users operations.
    /// </summary>
    public partial interface IUsers
    {
        /// <summary>
        /// Gets a list of users
        /// </summary>
        /// <param name='upn'>
        /// Optional filter on user UPN
        /// </param>
        /// <param name='firstName'>
        /// Optional filter on first name
        /// </param>
        /// <param name='lastName'>
        /// Optional filter on last name
        /// </param>
        /// <param name='includes'>
        /// Comma separated list of what to include, for example "Space".
        /// Defaults to None. A user can request their own RoleAssignments by
        /// passing in the "RoleAssigments" include parameter, but they cannot
        /// request the role assignments of others. Possible values include:
        /// 'None', 'FullPath', 'Location', 'Properties', 'RoleAssignments',
        /// 'Space'
        /// </param>
        /// <param name='propertyKey'>
        /// Optional filter on objects that have the given property key defined
        /// </param>
        /// <param name='propertyValue'>
        /// Optional filter on the value of the given property key
        /// </param>
        /// <param name='propertyValueSearchType'>
        /// Optional type of search on property value. Contains or Equals.
        /// Defaults to Equals. Possible values include: 'Equals', 'Contains'
        /// </param>
        /// <param name='spaceId'>
        /// Optionally filter on objects based on their location in the
        /// topology relative to the specified spaceId
        /// </param>
        /// <param name='traverse'>
        /// None (the default) for the specified spaceId only, Down for space
        /// and descendants, Up for spaceId and ancestors, Any for both.
        /// Possible values include: 'None', 'Down', 'Up', 'Span'
        /// </param>
        /// <param name='minLevel'>
        /// Optional filter on minimum level, inclusive
        /// </param>
        /// <param name='maxLevel'>
        /// Optional filter on maximum level, inclusive
        /// </param>
        /// <param name='minRelative'>
        /// Specify if min level is absolute or relative
        /// </param>
        /// <param name='maxRelative'>
        /// Specify if max level is absolute or relative
        /// </param>
        /// <param name='filter'>
        /// Odata Filter parameter
        /// </param>
        /// <param name='orderby'>
        /// Odata OrderBy parameter
        /// </param>
        /// <param name='skip'>
        /// Odata Skip parameter
        /// </param>
        /// <param name='top'>
        /// Odata Top parameter
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse<System.Collections.Generic.IList<UserRetrieve>>> RetrieveWithHttpMessagesAsync(string upn = default(string), string firstName = default(string), string lastName = default(string), string includes = default(string), string propertyKey = default(string), string propertyValue = default(string), string propertyValueSearchType = default(string), System.Guid? spaceId = default(System.Guid?), string traverse = default(string), int? minLevel = default(int?), int? maxLevel = default(int?), bool? minRelative = default(bool?), bool? maxRelative = default(bool?), string filter = default(string), string orderby = default(string), int? skip = default(int?), int? top = default(int?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates or updates a user, using SpaceId and upn as lookup keys
        /// </summary>
        /// <param name='data'>
        /// User settings
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse<System.Guid?>> CreateOrUpdateWithHttpMessagesAsync(UserCreateWithSpace data, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a specific user
        /// </summary>
        /// <param name='id'>
        /// User identifier
        /// </param>
        /// <param name='includes'>
        /// Comma separated list of what to include, for example "Space".
        /// Defaults to None. A user can request their own RoleAssignments by
        /// passing in the "RoleAssigments" include parameter, but they cannot
        /// request the role assignments of others. Possible values include:
        /// 'None', 'FullPath', 'Location', 'Properties', 'RoleAssignments',
        /// 'Space'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse<UserRetrieve>> RetrieveByIdWithHttpMessagesAsync(System.Guid id, string includes = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a user
        /// </summary>
        /// <param name='id'>
        /// User Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse> DeleteWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a user
        /// </summary>
        /// <param name='id'>
        /// User identifier
        /// </param>
        /// <param name='data'>
        /// User settings
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse> UpdateWithHttpMessagesAsync(System.Guid id, UserUpdate data, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a list of blobs
        /// </summary>
        /// <param name='names'>
        /// Optional ';' or ',' delimited list of blob names to filter by
        /// </param>
        /// <param name='ids'>
        /// Optional ';' or ',' delimited list of ids to filter by
        /// </param>
        /// <param name='sharings'>
        /// Optional ';' or ',' delimited list of Sharing modes to filter by
        /// </param>
        /// <param name='types'>
        /// Optional ';' or ',' delimited list of types to filter by
        /// </param>
        /// <param name='subtypes'>
        /// Optional ';' or ',' delimited list of subtypes to filter by
        /// </param>
        /// <param name='includes'>
        /// Comma separated list of what to include, for example
        /// "ContentInfo,Description". Defaults to None. Possible values
        /// include: 'None', 'ContentInfo', 'Description', 'FullPath', 'Types'
        /// </param>
        /// <param name='spaceId'>
        /// Optionally filter on objects based on their location in the
        /// topology relative to the specified spaceId
        /// </param>
        /// <param name='traverse'>
        /// None (the default) for the specified spaceId only, Down for space
        /// and descendants, Up for spaceId and ancestors, Any for both.
        /// Possible values include: 'None', 'Down', 'Up', 'Span'
        /// </param>
        /// <param name='minLevel'>
        /// Optional filter on minimum level, inclusive
        /// </param>
        /// <param name='maxLevel'>
        /// Optional filter on maximum level, inclusive
        /// </param>
        /// <param name='minRelative'>
        /// Specify if min level is absolute or relative
        /// </param>
        /// <param name='maxRelative'>
        /// Specify if max level is absolute or relative
        /// </param>
        /// <param name='filter'>
        /// Odata Filter parameter
        /// </param>
        /// <param name='orderby'>
        /// Odata OrderBy parameter
        /// </param>
        /// <param name='skip'>
        /// Odata Skip parameter
        /// </param>
        /// <param name='top'>
        /// Odata Top parameter
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse<System.Collections.Generic.IList<BlobMetadataRetrieve>>> RetrieveBlobMetadataWithHttpMessagesAsync(string names = default(string), string ids = default(string), string sharings = default(string), string types = default(string), string subtypes = default(string), string includes = default(string), System.Guid? spaceId = default(System.Guid?), string traverse = default(string), int? minLevel = default(int?), int? maxLevel = default(int?), bool? minRelative = default(bool?), bool? maxRelative = default(bool?), string filter = default(string), string orderby = default(string), int? skip = default(int?), int? top = default(int?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a blob
        /// </summary>
        /// <remarks>
        /// This is a multi-part request. For more information, see sample app
        /// or doc examples.
        /// Key value pairs specified in the Content-Disposition header in the
        /// blob-chunk of the multipart request will be preserved as meta-data
        /// on the stored blob.
        /// </remarks>
        /// <param name='metadata'>
        /// The mime type of this parameter is "application/json" and its
        /// schema is #/definitions/BlobMetadataCreate
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse<System.Guid?>> CreateBlobWithHttpMessagesAsync(string metadata, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a blob
        /// </summary>
        /// <param name='id'>
        /// Blob Id
        /// </param>
        /// <param name='includes'>
        /// Comma separated list of what to include, for example
        /// "ContentInfo,Description". Defaults to None. Possible values
        /// include: 'None', 'ContentInfo', 'Description', 'FullPath', 'Types'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse<BlobMetadataRetrieve>> RetrieveBlobMetadataByIdWithHttpMessagesAsync(System.Guid id, string includes = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a blob
        /// </summary>
        /// <remarks>
        /// Deleting a blob will delete its metadata, its content (all
        /// versions) and its associations
        /// </remarks>
        /// <param name='id'>
        /// Blob Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse> DeleteBlobWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a blob
        /// </summary>
        /// <remarks>
        /// This is a multi-part request. For more information, see sample app
        /// or doc examples.
        /// </remarks>
        /// <param name='id'>
        /// blob Id
        /// </param>
        /// <param name='metadata'>
        /// The mime type of this parameter is "application/json" and its
        /// schema is #/definitions/BlobMetadataUpdate
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse> UpdateBlobWithHttpMessagesAsync(System.Guid id, string metadata, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the contents of the given version of the given blob
        /// </summary>
        /// <param name='id'>
        /// blob id
        /// </param>
        /// <param name='version'>
        /// blob content version
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse<System.IO.Stream>> GetBlobContentsWithHttpMessagesAsync(System.Guid id, long version, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete the contents of the given version of the given blob
        /// </summary>
        /// <remarks>
        /// Delete will fail if this version has any associations
        /// </remarks>
        /// <param name='id'>
        /// blob id
        /// </param>
        /// <param name='version'>
        /// blob version
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse> DeleteBlobContentsWithHttpMessagesAsync(System.Guid id, long version, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the contents of the latest version of the given blob
        /// </summary>
        /// <param name='id'>
        /// blob id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse<System.IO.Stream>> GetLatestBlobContentsWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the value of a property
        /// </summary>
        /// <param name='id'>
        /// Parent Id
        /// </param>
        /// <param name='name'>
        /// Property name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse<string>> RetrievePropertyWithHttpMessagesAsync(System.Guid id, string name, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes the given property value
        /// </summary>
        /// <param name='id'>
        /// Parent Id
        /// </param>
        /// <param name='name'>
        /// Property name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse> DeletePropertyWithHttpMessagesAsync(System.Guid id, string name, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates or updates property values
        /// </summary>
        /// <param name='id'>
        /// Parent Id
        /// </param>
        /// <param name='data'>
        /// The properties
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse<object>> UpdatePropertiesWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.IList<ExtendedPropertyCreate> data, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a property value
        /// </summary>
        /// <param name='id'>
        /// Parent Id
        /// </param>
        /// <param name='data'>
        /// Extended property data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse<string>> CreatePropertyWithHttpMessagesAsync(System.Guid id, ExtendedPropertyCreate data, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes all property values
        /// </summary>
        /// <param name='id'>
        /// Parent Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorInformationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<HttpOperationResponse> DeletePropertiesWithHttpMessagesAsync(System.Guid id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}
