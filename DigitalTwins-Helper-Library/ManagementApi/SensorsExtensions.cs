// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Sensors.
    /// </summary>
    public static partial class SensorsExtensions
    {
            /// <summary>
            /// Gets a list of sensors
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Optional ';' or ',' delimited list of ids to filter by
            /// </param>
            /// <param name='deviceIds'>
            /// Optionally filter on sensors that belong to the given devices
            /// </param>
            /// <param name='types'>
            /// Optionally filter on types
            /// </param>
            /// <param name='portTypes'>
            /// Optionally on port types
            /// </param>
            /// <param name='dataTypes'>
            /// Optionally on data subtypes
            /// </param>
            /// <param name='dataSubtypes'>
            /// Optionally on data types
            /// </param>
            /// <param name='dataUnitTypes'>
            /// Optionally on data unit types
            /// </param>
            /// <param name='hardwareIds'>
            /// Optionally on hardwareIds
            /// </param>
            /// <param name='includes'>
            /// What to include. Possible values include: 'None', 'Properties', 'Device',
            /// 'FullPath', 'Location', 'Space', 'Types', 'Value'
            /// </param>
            /// <param name='propertyKey'>
            /// Optional filter on objects that have the given property key defined
            /// </param>
            /// <param name='propertyValue'>
            /// Optional filter on the value of the given property key
            /// </param>
            /// <param name='propertyValueSearchType'>
            /// Optional type of search on property value. Contains or Equals. Defaults to
            /// Equals. Possible values include: 'Equals', 'Contains'
            /// </param>
            /// <param name='spaceId'>
            /// Optionally filter on objects based on their location in the topology
            /// relative to the specified spaceId
            /// </param>
            /// <param name='traverse'>
            /// None (the default) for the specified spaceId only, Down for space and
            /// descendants, Up for spaceId and ancestors, Any for both. Possible values
            /// include: 'None', 'Down', 'Up', 'Span'
            /// </param>
            /// <param name='minLevel'>
            /// Optional filter on minimum level, inclusive
            /// </param>
            /// <param name='maxLevel'>
            /// Optional filter on maximum level, inclusive
            /// </param>
            /// <param name='minRelative'>
            /// Specify if min level is absolute or relative
            /// </param>
            /// <param name='maxRelative'>
            /// Specify if max level is absolute or relative
            /// </param>
            /// <param name='filter'>
            /// Odata Filter parameter
            /// </param>
            /// <param name='orderby'>
            /// Odata OrderBy parameter
            /// </param>
            /// <param name='skip'>
            /// Odata Skip parameter
            /// </param>
            /// <param name='top'>
            /// Odata Top parameter
            /// </param>
            public static System.Collections.Generic.IList<SensorRetrieve> Retrieve(this ISensors operations, string ids = default(string), string deviceIds = default(string), string types = default(string), string portTypes = default(string), string dataTypes = default(string), string dataSubtypes = default(string), string dataUnitTypes = default(string), string hardwareIds = default(string), string includes = default(string), string propertyKey = default(string), string propertyValue = default(string), string propertyValueSearchType = default(string), System.Guid? spaceId = default(System.Guid?), string traverse = default(string), int? minLevel = default(int?), int? maxLevel = default(int?), bool? minRelative = default(bool?), bool? maxRelative = default(bool?), string filter = default(string), string orderby = default(string), int? skip = default(int?), int? top = default(int?))
            {
                return operations.RetrieveAsync(ids, deviceIds, types, portTypes, dataTypes, dataSubtypes, dataUnitTypes, hardwareIds, includes, propertyKey, propertyValue, propertyValueSearchType, spaceId, traverse, minLevel, maxLevel, minRelative, maxRelative, filter, orderby, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of sensors
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Optional ';' or ',' delimited list of ids to filter by
            /// </param>
            /// <param name='deviceIds'>
            /// Optionally filter on sensors that belong to the given devices
            /// </param>
            /// <param name='types'>
            /// Optionally filter on types
            /// </param>
            /// <param name='portTypes'>
            /// Optionally on port types
            /// </param>
            /// <param name='dataTypes'>
            /// Optionally on data subtypes
            /// </param>
            /// <param name='dataSubtypes'>
            /// Optionally on data types
            /// </param>
            /// <param name='dataUnitTypes'>
            /// Optionally on data unit types
            /// </param>
            /// <param name='hardwareIds'>
            /// Optionally on hardwareIds
            /// </param>
            /// <param name='includes'>
            /// What to include. Possible values include: 'None', 'Properties', 'Device',
            /// 'FullPath', 'Location', 'Space', 'Types', 'Value'
            /// </param>
            /// <param name='propertyKey'>
            /// Optional filter on objects that have the given property key defined
            /// </param>
            /// <param name='propertyValue'>
            /// Optional filter on the value of the given property key
            /// </param>
            /// <param name='propertyValueSearchType'>
            /// Optional type of search on property value. Contains or Equals. Defaults to
            /// Equals. Possible values include: 'Equals', 'Contains'
            /// </param>
            /// <param name='spaceId'>
            /// Optionally filter on objects based on their location in the topology
            /// relative to the specified spaceId
            /// </param>
            /// <param name='traverse'>
            /// None (the default) for the specified spaceId only, Down for space and
            /// descendants, Up for spaceId and ancestors, Any for both. Possible values
            /// include: 'None', 'Down', 'Up', 'Span'
            /// </param>
            /// <param name='minLevel'>
            /// Optional filter on minimum level, inclusive
            /// </param>
            /// <param name='maxLevel'>
            /// Optional filter on maximum level, inclusive
            /// </param>
            /// <param name='minRelative'>
            /// Specify if min level is absolute or relative
            /// </param>
            /// <param name='maxRelative'>
            /// Specify if max level is absolute or relative
            /// </param>
            /// <param name='filter'>
            /// Odata Filter parameter
            /// </param>
            /// <param name='orderby'>
            /// Odata OrderBy parameter
            /// </param>
            /// <param name='skip'>
            /// Odata Skip parameter
            /// </param>
            /// <param name='top'>
            /// Odata Top parameter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<SensorRetrieve>> RetrieveAsync(this ISensors operations, string ids = default(string), string deviceIds = default(string), string types = default(string), string portTypes = default(string), string dataTypes = default(string), string dataSubtypes = default(string), string dataUnitTypes = default(string), string hardwareIds = default(string), string includes = default(string), string propertyKey = default(string), string propertyValue = default(string), string propertyValueSearchType = default(string), System.Guid? spaceId = default(System.Guid?), string traverse = default(string), int? minLevel = default(int?), int? maxLevel = default(int?), bool? minRelative = default(bool?), bool? maxRelative = default(bool?), string filter = default(string), string orderby = default(string), int? skip = default(int?), int? top = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveWithHttpMessagesAsync(ids, deviceIds, types, portTypes, dataTypes, dataSubtypes, dataUnitTypes, hardwareIds, includes, propertyKey, propertyValue, propertyValueSearchType, spaceId, traverse, minLevel, maxLevel, minRelative, maxRelative, filter, orderby, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a sensor
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='data'>
            /// The sensor information
            /// </param>
            public static System.Guid? Create(this ISensors operations, SensorCreate data)
            {
                return operations.CreateAsync(data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a sensor
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='data'>
            /// The sensor information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Guid?> CreateAsync(this ISensors operations, SensorCreate data, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(data, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a sensor
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier
            /// </param>
            /// <param name='includes'>
            /// What to include. Possible values include: 'None', 'Properties', 'Device',
            /// 'FullPath', 'Location', 'Space', 'Types', 'Value'
            /// </param>
            public static SensorRetrieve RetrieveById(this ISensors operations, System.Guid id, string includes = default(string))
            {
                return operations.RetrieveByIdAsync(id, includes).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a sensor
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier
            /// </param>
            /// <param name='includes'>
            /// What to include. Possible values include: 'None', 'Properties', 'Device',
            /// 'FullPath', 'Location', 'Space', 'Types', 'Value'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SensorRetrieve> RetrieveByIdAsync(this ISensors operations, System.Guid id, string includes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveByIdWithHttpMessagesAsync(id, includes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a sensor
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The sensor Id
            /// </param>
            public static void Delete(this ISensors operations, System.Guid id)
            {
                operations.DeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a sensor
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The sensor Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this ISensors operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a sensor
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The sensor Id
            /// </param>
            /// <param name='data'>
            /// The sensor information
            /// </param>
            public static void Update(this ISensors operations, System.Guid id, SensorUpdate data)
            {
                operations.UpdateAsync(id, data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a sensor
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The sensor Id
            /// </param>
            /// <param name='data'>
            /// The sensor information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task UpdateAsync(this ISensors operations, System.Guid id, SensorUpdate data, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.UpdateWithHttpMessagesAsync(id, data, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the matchers that match the given sensor
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Sensor identifier
            /// </param>
            /// <param name='includes'>
            /// What to include. Possible values include: 'None', 'Description',
            /// 'FullPath', 'Space', 'Conditions', 'UserDefinedFunctions'
            /// </param>
            public static System.Collections.Generic.IList<MatcherRetrieve> MatchersMethod(this ISensors operations, System.Guid id, string includes = default(string))
            {
                return operations.MatchersMethodAsync(id, includes).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the matchers that match the given sensor
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Sensor identifier
            /// </param>
            /// <param name='includes'>
            /// What to include. Possible values include: 'None', 'Description',
            /// 'FullPath', 'Space', 'Conditions', 'UserDefinedFunctions'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<MatcherRetrieve>> MatchersMethodAsync(this ISensors operations, System.Guid id, string includes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.MatchersMethodWithHttpMessagesAsync(id, includes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a sensor's value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier
            /// </param>
            public static SensorValue GetValue(this ISensors operations, System.Guid id)
            {
                return operations.GetValueAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a sensor's value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SensorValue> GetValueAsync(this ISensors operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetValueWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the value of a property
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Parent Id
            /// </param>
            /// <param name='name'>
            /// Property name
            /// </param>
            public static string RetrieveProperty(this ISensors operations, System.Guid id, string name)
            {
                return operations.RetrievePropertyAsync(id, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the value of a property
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Parent Id
            /// </param>
            /// <param name='name'>
            /// Property name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<string> RetrievePropertyAsync(this ISensors operations, System.Guid id, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrievePropertyWithHttpMessagesAsync(id, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the given property value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Parent Id
            /// </param>
            /// <param name='name'>
            /// Property name
            /// </param>
            public static void DeleteProperty(this ISensors operations, System.Guid id, string name)
            {
                operations.DeletePropertyAsync(id, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the given property value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Parent Id
            /// </param>
            /// <param name='name'>
            /// Property name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeletePropertyAsync(this ISensors operations, System.Guid id, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeletePropertyWithHttpMessagesAsync(id, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates property values
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Parent Id
            /// </param>
            /// <param name='data'>
            /// The properties
            /// </param>
            public static object UpdateProperties(this ISensors operations, System.Guid id, System.Collections.Generic.IList<ExtendedPropertyCreate> data)
            {
                return operations.UpdatePropertiesAsync(id, data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates property values
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Parent Id
            /// </param>
            /// <param name='data'>
            /// The properties
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> UpdatePropertiesAsync(this ISensors operations, System.Guid id, System.Collections.Generic.IList<ExtendedPropertyCreate> data, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdatePropertiesWithHttpMessagesAsync(id, data, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a property value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Parent Id
            /// </param>
            /// <param name='data'>
            /// Extended property data
            /// </param>
            public static string CreateProperty(this ISensors operations, System.Guid id, ExtendedPropertyCreate data)
            {
                return operations.CreatePropertyAsync(id, data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a property value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Parent Id
            /// </param>
            /// <param name='data'>
            /// Extended property data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<string> CreatePropertyAsync(this ISensors operations, System.Guid id, ExtendedPropertyCreate data, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreatePropertyWithHttpMessagesAsync(id, data, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes all property values
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Parent Id
            /// </param>
            public static void DeleteProperties(this ISensors operations, System.Guid id)
            {
                operations.DeletePropertiesAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes all property values
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Parent Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeletePropertiesAsync(this ISensors operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeletePropertiesWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
