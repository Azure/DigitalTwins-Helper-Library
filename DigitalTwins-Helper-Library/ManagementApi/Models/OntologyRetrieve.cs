// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class OntologyRetrieve
    {
        /// <summary>
        /// Initializes a new instance of the OntologyRetrieve class.
        /// </summary>
        public OntologyRetrieve()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OntologyRetrieve class.
        /// </summary>
        /// <param name="id">The identifier</param>
        /// <param name="name">Ontology name</param>
        /// <param name="loaded">If true, new extended types associated with
        /// this ontology are automatically enabled</param>
        /// <param name="description">Optional description</param>
        /// <param name="types">Associated extended types</param>
        public OntologyRetrieve(int id, string name, bool loaded, string description = default(string), System.Collections.Generic.IList<ExtendedTypeRetrieve> types = default(System.Collections.Generic.IList<ExtendedTypeRetrieve>))
        {
            Id = id;
            Name = name;
            Loaded = loaded;
            Description = description;
            Types = types;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the identifier
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets ontology name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets if true, new extended types associated with this
        /// ontology are automatically enabled
        /// </summary>
        [JsonProperty(PropertyName = "loaded")]
        public bool Loaded { get; set; }

        /// <summary>
        /// Gets or sets optional description
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets associated extended types
        /// </summary>
        [JsonProperty(PropertyName = "types")]
        public System.Collections.Generic.IList<ExtendedTypeRetrieve> Types { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Name != null)
            {
                if (Name.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 20);
                }
                if (Name.Length < 3)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 3);
                }
            }
            if (Description != null)
            {
                if (Description.Length > 4000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 4000);
                }
                if (Description.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Description", 0);
                }
            }
            if (Types != null)
            {
                foreach (var element in Types)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
