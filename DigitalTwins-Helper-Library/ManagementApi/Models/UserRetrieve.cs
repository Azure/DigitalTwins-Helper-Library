// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class UserRetrieve
    {
        /// <summary>
        /// Initializes a new instance of the UserRetrieve class.
        /// </summary>
        public UserRetrieve()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserRetrieve class.
        /// </summary>
        /// <param name="id">The identifier</param>
        /// <param name="upn">User Principal Name, e.g. user@domain</param>
        /// <param name="spaceId">Parent space Id</param>
        /// <param name="firstName">First name</param>
        /// <param name="lastName">Last Name</param>
        /// <param name="managerName">Manager name</param>
        /// <param name="metadata">User metadata such as skills, interests,
        /// etc.</param>
        /// <param name="space">Parent space</param>
        /// <param name="photoUri">Uri to the user's picture thumbnail</param>
        /// <param name="roleAssignments">The role assignments associated with
        /// the user.</param>
        public UserRetrieve(System.Guid id, string upn, System.Guid spaceId, Location location = default(Location), string firstName = default(string), string lastName = default(string), string managerName = default(string), System.Collections.Generic.IDictionary<string, string> metadata = default(System.Collections.Generic.IDictionary<string, string>), Location effectiveLocation = default(Location), SpaceRetrieve space = default(SpaceRetrieve), string photoUri = default(string), string fullName = default(string), System.Collections.Generic.IList<string> spacePaths = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<ExtendedPropertyRetrieve> properties = default(System.Collections.Generic.IList<ExtendedPropertyRetrieve>), System.Collections.Generic.IList<RoleAssignmentRetrieve> roleAssignments = default(System.Collections.Generic.IList<RoleAssignmentRetrieve>))
        {
            Id = id;
            Upn = upn;
            Location = location;
            FirstName = firstName;
            LastName = lastName;
            ManagerName = managerName;
            Metadata = metadata;
            EffectiveLocation = effectiveLocation;
            SpaceId = spaceId;
            Space = space;
            PhotoUri = photoUri;
            FullName = fullName;
            SpacePaths = spacePaths;
            Properties = properties;
            RoleAssignments = roleAssignments;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the identifier
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Gets or sets user Principal Name, e.g. user@domain
        /// </summary>
        [JsonProperty(PropertyName = "upn")]
        public string Upn { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or sets first name
        /// </summary>
        [JsonProperty(PropertyName = "firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or sets last Name
        /// </summary>
        [JsonProperty(PropertyName = "lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or sets manager name
        /// </summary>
        [JsonProperty(PropertyName = "managerName")]
        public string ManagerName { get; set; }

        /// <summary>
        /// Gets or sets user metadata such as skills, interests, etc.
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "effectiveLocation")]
        public Location EffectiveLocation { get; set; }

        /// <summary>
        /// Gets or sets parent space Id
        /// </summary>
        [JsonProperty(PropertyName = "spaceId")]
        public System.Guid SpaceId { get; set; }

        /// <summary>
        /// Gets or sets parent space
        /// </summary>
        [JsonProperty(PropertyName = "space")]
        public SpaceRetrieve Space { get; set; }

        /// <summary>
        /// Gets or sets uri to the user's picture thumbnail
        /// </summary>
        [JsonProperty(PropertyName = "photoUri")]
        public string PhotoUri { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fullName")]
        public string FullName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "spacePaths")]
        public System.Collections.Generic.IList<string> SpacePaths { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public System.Collections.Generic.IList<ExtendedPropertyRetrieve> Properties { get; set; }

        /// <summary>
        /// Gets or sets the role assignments associated with the user.
        /// </summary>
        [JsonProperty(PropertyName = "roleAssignments")]
        public System.Collections.Generic.IList<RoleAssignmentRetrieve> RoleAssignments { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Upn == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Upn");
            }
            if (Location != null)
            {
                Location.Validate();
            }
            if (EffectiveLocation != null)
            {
                EffectiveLocation.Validate();
            }
            if (Space != null)
            {
                Space.Validate();
            }
            if (RoleAssignments != null)
            {
                foreach (var element in RoleAssignments)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
