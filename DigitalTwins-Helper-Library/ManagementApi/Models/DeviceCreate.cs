// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Device create model
    /// </summary>
    public partial class DeviceCreate
    {
        /// <summary>
        /// Initializes a new instance of the DeviceCreate class.
        /// </summary>
        public DeviceCreate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DeviceCreate class.
        /// </summary>
        /// <param name="hardwareId">Hardware unique identifier, such as MAC
        /// address.</param>
        /// <param name="spaceId">Parent space id</param>
        /// <param name="friendlyName">Optional friendly name</param>
        /// <param name="type">Device type. Defaults to None</param>
        /// <param name="typeId">Device type identifier. Cannot specify both
        /// Type and TypeId</param>
        /// <param name="subtype">Device subtype. Defaults to None</param>
        /// <param name="subtypeId">Device subtype identifier. Cannot specify
        /// both Subtype and SubtypeId</param>
        /// <param name="gatewayId">Optional free-form gateway
        /// identifier</param>
        /// <param name="status">The status. Possible values include:
        /// 'Provisioned', 'Active', 'Offline', 'Disabled'</param>
        /// <param name="sensors">Children sensors</param>
        /// <param name="createIoTHubDevice">Flag to specify that corresponding
        /// IoT Hub device should be created at the same
        /// time as the SBS device. IoT Hub device can be created later by
        /// requesting the
        /// IoT Hub URL, IoT Hub connection string, or device key for the
        /// device.
        /// Defaults to true.</param>
        /// <param name="parentDeviceType">If specified, automatically set the
        /// device’s GatewayId to a device of the given type.
        /// Must include both ParentDeviceType and ParentDeviceSubtype with a
        /// null GatewayId</param>
        /// <param name="parentDeviceSubtype">If specified, automatically set
        /// the device’s GatewayId to a device of the given type.
        /// Must include both ParentDeviceType and ParentDeviceSubtype with a
        /// null GatewayId</param>
        public DeviceCreate(string name, string hardwareId, System.Guid spaceId, string friendlyName = default(string), string description = default(string), string type = default(string), int? typeId = default(int?), string subtype = default(string), int? subtypeId = default(int?), string gatewayId = default(string), string status = default(string), Location location = default(Location), System.Collections.Generic.IList<SensorCreateNoParent> sensors = default(System.Collections.Generic.IList<SensorCreateNoParent>), bool? createIoTHubDevice = default(bool?), string parentDeviceType = default(string), string parentDeviceSubtype = default(string), System.Collections.Generic.IList<ExtendedPropertyCreate> properties = default(System.Collections.Generic.IList<ExtendedPropertyCreate>))
        {
            Name = name;
            FriendlyName = friendlyName;
            Description = description;
            Type = type;
            TypeId = typeId;
            Subtype = subtype;
            SubtypeId = subtypeId;
            HardwareId = hardwareId;
            GatewayId = gatewayId;
            SpaceId = spaceId;
            Status = status;
            Location = location;
            Sensors = sensors;
            CreateIoTHubDevice = createIoTHubDevice;
            ParentDeviceType = parentDeviceType;
            ParentDeviceSubtype = parentDeviceSubtype;
            Properties = properties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets optional friendly name
        /// </summary>
        [JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets device type. Defaults to None
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets device type identifier. Cannot specify both Type and
        /// TypeId
        /// </summary>
        [JsonProperty(PropertyName = "typeId")]
        public int? TypeId { get; set; }

        /// <summary>
        /// Gets or sets device subtype. Defaults to None
        /// </summary>
        [JsonProperty(PropertyName = "subtype")]
        public string Subtype { get; set; }

        /// <summary>
        /// Gets or sets device subtype identifier. Cannot specify both Subtype
        /// and SubtypeId
        /// </summary>
        [JsonProperty(PropertyName = "subtypeId")]
        public int? SubtypeId { get; set; }

        /// <summary>
        /// Gets or sets hardware unique identifier, such as MAC address.
        /// </summary>
        [JsonProperty(PropertyName = "hardwareId")]
        public string HardwareId { get; set; }

        /// <summary>
        /// Gets or sets optional free-form gateway identifier
        /// </summary>
        [JsonProperty(PropertyName = "gatewayId")]
        public string GatewayId { get; set; }

        /// <summary>
        /// Gets or sets parent space id
        /// </summary>
        [JsonProperty(PropertyName = "spaceId")]
        public System.Guid SpaceId { get; set; }

        /// <summary>
        /// Gets or sets the status. Possible values include: 'Provisioned',
        /// 'Active', 'Offline', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or sets children sensors
        /// </summary>
        [JsonProperty(PropertyName = "sensors")]
        public System.Collections.Generic.IList<SensorCreateNoParent> Sensors { get; set; }

        /// <summary>
        /// Gets or sets flag to specify that corresponding IoT Hub device
        /// should be created at the same
        /// time as the SBS device. IoT Hub device can be created later by
        /// requesting the
        /// IoT Hub URL, IoT Hub connection string, or device key for the
        /// device.
        /// Defaults to true.
        /// </summary>
        [JsonProperty(PropertyName = "createIoTHubDevice")]
        public bool? CreateIoTHubDevice { get; set; }

        /// <summary>
        /// Gets or sets if specified, automatically set the device’s GatewayId
        /// to a device of the given type.
        /// Must include both ParentDeviceType and ParentDeviceSubtype with a
        /// null GatewayId
        /// </summary>
        [JsonProperty(PropertyName = "parentDeviceType")]
        public string ParentDeviceType { get; set; }

        /// <summary>
        /// Gets or sets if specified, automatically set the device’s GatewayId
        /// to a device of the given type.
        /// Must include both ParentDeviceType and ParentDeviceSubtype with a
        /// null GatewayId
        /// </summary>
        [JsonProperty(PropertyName = "parentDeviceSubtype")]
        public string ParentDeviceSubtype { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public System.Collections.Generic.IList<ExtendedPropertyCreate> Properties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (HardwareId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "HardwareId");
            }
            if (Name != null)
            {
                if (Name.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 64);
                }
                if (Name.Length < 3)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 3);
                }
            }
            if (FriendlyName != null)
            {
                if (FriendlyName.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "FriendlyName", 64);
                }
                if (FriendlyName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "FriendlyName", 0);
                }
            }
            if (Description != null)
            {
                if (Description.Length > 4000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 4000);
                }
                if (Description.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Description", 0);
                }
            }
            if (HardwareId != null)
            {
                if (HardwareId.Length > 36)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "HardwareId", 36);
                }
                if (HardwareId.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "HardwareId", 0);
                }
            }
            if (GatewayId != null)
            {
                if (GatewayId.Length > 36)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "GatewayId", 36);
                }
                if (GatewayId.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "GatewayId", 0);
                }
            }
            if (Location != null)
            {
                Location.Validate();
            }
            if (Sensors != null)
            {
                foreach (var element in Sensors)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Properties != null)
            {
                foreach (var element1 in Properties)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
