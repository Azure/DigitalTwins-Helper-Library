// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Space retrieve with child objects
    /// </summary>
    public partial class SpaceRetrieveWithChildren
    {
        /// <summary>
        /// Initializes a new instance of the SpaceRetrieveWithChildren class.
        /// </summary>
        public SpaceRetrieveWithChildren()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SpaceRetrieveWithChildren class.
        /// </summary>
        /// <param name="id">The identifier</param>
        /// <param name="typeId">Type identifier</param>
        /// <param name="subtypeId">Subtype identifier</param>
        /// <param name="statusId">Status identifier</param>
        /// <param name="children">Child spaces</param>
        /// <param name="sensors">Child sensors</param>
        /// <param name="devices">Child devices</param>
        /// <param name="resources">Space resources</param>
        /// <param name="timeZone">Time zone information</param>
        /// <param name="effectiveTimeZone">Same as TimeZone, if defined.
        /// Otherwise same as EffectiveTimeZone of parent space</param>
        /// <param name="users">Associated users</param>
        /// <param name="parent">Parent space</param>
        /// <param name="values">Aggregate of associated sensor values</param>
        /// <param name="friendlyName">Optional friendly name</param>
        /// <param name="type">Primary space type</param>
        /// <param name="parentSpaceId">The space's parent space</param>
        /// <param name="subtype">Space subtype</param>
        /// <param name="location">Optional physical location for the
        /// space</param>
        /// <param name="timeZoneId">Optional time zone identifier for the
        /// space</param>
        /// <param name="status">The status</param>
        /// <param name="effectiveTimeZoneId">Same as TimeZoneId, if defined.
        /// Otherwise same as EffectiveTimeZoneId of parent space</param>
        public SpaceRetrieveWithChildren(System.Guid id, string name, int typeId, int subtypeId, int statusId, System.Collections.Generic.IList<SpaceRetrieveWithProperties> children = default(System.Collections.Generic.IList<SpaceRetrieveWithProperties>), System.Collections.Generic.IList<SensorRetrieve> sensors = default(System.Collections.Generic.IList<SensorRetrieve>), System.Collections.Generic.IList<DeviceRetrieve> devices = default(System.Collections.Generic.IList<DeviceRetrieve>), System.Collections.Generic.IList<SpaceResourceRetrieve> resources = default(System.Collections.Generic.IList<SpaceResourceRetrieve>), TimeZone timeZone = default(TimeZone), TimeZone effectiveTimeZone = default(TimeZone), System.Collections.Generic.IList<UserRetrieve> users = default(System.Collections.Generic.IList<UserRetrieve>), SpaceRetrieve parent = default(SpaceRetrieve), System.Collections.Generic.IList<SensorValue> values = default(System.Collections.Generic.IList<SensorValue>), System.Collections.Generic.IList<ExtendedPropertyRetrieve> properties = default(System.Collections.Generic.IList<ExtendedPropertyRetrieve>), string description = default(string), string friendlyName = default(string), string type = default(string), System.Guid? parentSpaceId = default(System.Guid?), string subtype = default(string), Location location = default(Location), int? timeZoneId = default(int?), string status = default(string), string fullName = default(string), System.Collections.Generic.IList<string> spacePaths = default(System.Collections.Generic.IList<string>), Location effectiveLocation = default(Location), int? effectiveTimeZoneId = default(int?))
        {
            Children = children;
            Sensors = sensors;
            Devices = devices;
            Resources = resources;
            TimeZone = timeZone;
            EffectiveTimeZone = effectiveTimeZone;
            Users = users;
            Parent = parent;
            Values = values;
            Properties = properties;
            Id = id;
            Name = name;
            Description = description;
            FriendlyName = friendlyName;
            Type = type;
            TypeId = typeId;
            ParentSpaceId = parentSpaceId;
            Subtype = subtype;
            SubtypeId = subtypeId;
            Location = location;
            TimeZoneId = timeZoneId;
            Status = status;
            StatusId = statusId;
            FullName = fullName;
            SpacePaths = spacePaths;
            EffectiveLocation = effectiveLocation;
            EffectiveTimeZoneId = effectiveTimeZoneId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets child spaces
        /// </summary>
        [JsonProperty(PropertyName = "children")]
        public System.Collections.Generic.IList<SpaceRetrieveWithProperties> Children { get; set; }

        /// <summary>
        /// Gets or sets child sensors
        /// </summary>
        [JsonProperty(PropertyName = "sensors")]
        public System.Collections.Generic.IList<SensorRetrieve> Sensors { get; set; }

        /// <summary>
        /// Gets or sets child devices
        /// </summary>
        [JsonProperty(PropertyName = "devices")]
        public System.Collections.Generic.IList<DeviceRetrieve> Devices { get; set; }

        /// <summary>
        /// Gets or sets space resources
        /// </summary>
        [JsonProperty(PropertyName = "resources")]
        public System.Collections.Generic.IList<SpaceResourceRetrieve> Resources { get; set; }

        /// <summary>
        /// Gets or sets time zone information
        /// </summary>
        [JsonProperty(PropertyName = "timeZone")]
        public TimeZone TimeZone { get; set; }

        /// <summary>
        /// Gets or sets same as TimeZone, if defined. Otherwise same as
        /// EffectiveTimeZone of parent space
        /// </summary>
        [JsonProperty(PropertyName = "effectiveTimeZone")]
        public TimeZone EffectiveTimeZone { get; set; }

        /// <summary>
        /// Gets or sets associated users
        /// </summary>
        [JsonProperty(PropertyName = "users")]
        public System.Collections.Generic.IList<UserRetrieve> Users { get; set; }

        /// <summary>
        /// Gets or sets parent space
        /// </summary>
        [JsonProperty(PropertyName = "parent")]
        public SpaceRetrieve Parent { get; set; }

        /// <summary>
        /// Gets or sets aggregate of associated sensor values
        /// </summary>
        [JsonProperty(PropertyName = "values")]
        public System.Collections.Generic.IList<SensorValue> Values { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public System.Collections.Generic.IList<ExtendedPropertyRetrieve> Properties { get; set; }

        /// <summary>
        /// Gets or sets the identifier
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets optional friendly name
        /// </summary>
        [JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// Gets or sets primary space type
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets type identifier
        /// </summary>
        [JsonProperty(PropertyName = "typeId")]
        public int TypeId { get; set; }

        /// <summary>
        /// Gets or sets the space's parent space
        /// </summary>
        [JsonProperty(PropertyName = "parentSpaceId")]
        public System.Guid? ParentSpaceId { get; set; }

        /// <summary>
        /// Gets or sets space subtype
        /// </summary>
        [JsonProperty(PropertyName = "subtype")]
        public string Subtype { get; set; }

        /// <summary>
        /// Gets or sets subtype identifier
        /// </summary>
        [JsonProperty(PropertyName = "subtypeId")]
        public int SubtypeId { get; set; }

        /// <summary>
        /// Gets or sets optional physical location for the space
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or sets optional time zone identifier for the space
        /// </summary>
        [JsonProperty(PropertyName = "timeZoneId")]
        public int? TimeZoneId { get; set; }

        /// <summary>
        /// Gets or sets the status
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets status identifier
        /// </summary>
        [JsonProperty(PropertyName = "statusId")]
        public int StatusId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fullName")]
        public string FullName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "spacePaths")]
        public System.Collections.Generic.IList<string> SpacePaths { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "effectiveLocation")]
        public Location EffectiveLocation { get; set; }

        /// <summary>
        /// Gets or sets same as TimeZoneId, if defined. Otherwise same as
        /// EffectiveTimeZoneId of parent space
        /// </summary>
        [JsonProperty(PropertyName = "effectiveTimeZoneId")]
        public int? EffectiveTimeZoneId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Children != null)
            {
                foreach (var element in Children)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Sensors != null)
            {
                foreach (var element1 in Sensors)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (Devices != null)
            {
                foreach (var element2 in Devices)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (Resources != null)
            {
                foreach (var element3 in Resources)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
            if (TimeZone != null)
            {
                TimeZone.Validate();
            }
            if (EffectiveTimeZone != null)
            {
                EffectiveTimeZone.Validate();
            }
            if (Users != null)
            {
                foreach (var element4 in Users)
                {
                    if (element4 != null)
                    {
                        element4.Validate();
                    }
                }
            }
            if (Parent != null)
            {
                Parent.Validate();
            }
            if (Location != null)
            {
                Location.Validate();
            }
            if (EffectiveLocation != null)
            {
                EffectiveLocation.Validate();
            }
        }
    }
}
