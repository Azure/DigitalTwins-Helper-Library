// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Payload for updating a key store.
    /// TODO: should we allow moving to a different SpaceId during updates?
    /// </summary>
    public partial class KeyStoreUpdate
    {
        /// <summary>
        /// Initializes a new instance of the KeyStoreUpdate class.
        /// </summary>
        public KeyStoreUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the KeyStoreUpdate class.
        /// </summary>
        public KeyStoreUpdate(string name = default(string), string description = default(string))
        {
            Name = name;
            Description = description;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name != null)
            {
                if (Name.Length > 40)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 40);
                }
                if (Name.Length < 5)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 5);
                }
            }
            if (Description != null)
            {
                if (Description.Length > 4000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 4000);
                }
                if (Description.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Description", 0);
                }
            }
        }
    }
}
