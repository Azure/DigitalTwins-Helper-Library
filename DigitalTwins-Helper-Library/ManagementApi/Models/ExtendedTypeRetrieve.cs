// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ExtendedTypeRetrieve
    {
        /// <summary>
        /// Initializes a new instance of the ExtendedTypeRetrieve class.
        /// </summary>
        public ExtendedTypeRetrieve()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExtendedTypeRetrieve class.
        /// </summary>
        /// <param name="id">Type identifier</param>
        /// <param name="category">The type's category, for example
        /// SensorPortType. Possible values include: 'DeviceSubtype',
        /// 'DeviceType', 'DeviceBlobSubtype', 'DeviceBlobType',
        /// 'SensorDataSubtype', 'SensorDataType', 'SensorDataUnitType',
        /// 'SensorPortType', 'SensorType', 'SpaceBlobSubtype',
        /// 'SpaceBlobType', 'SpaceStatus', 'SpaceSubtype', 'SpaceType',
        /// 'UserBlobSubtype', 'UserBlobType'</param>
        /// <param name="disabled">If disabled, a type cannot be be referenced.
        /// This can be used to remove types from loaded ontologies or to
        /// prevent "wrong" type names from being created.
        /// For example, creating a disabled type called 'Temp' will enforce
        /// using Temperature instead</param>
        /// <param name="logicalOrder">Display logical ordering</param>
        /// <param name="spaceId">Parent space Id.
        /// If specified, the type is available to this space topology (custom
        /// type).
        /// If not, the type is available to all spaces (system type).</param>
        /// <param name="space">Parent space</param>
        /// <param name="friendlyName">Optional friendly name</param>
        /// <param name="ontologies">List of ontologies this type belongs
        /// to</param>
        public ExtendedTypeRetrieve(int id, string category, string name, bool disabled, int logicalOrder, System.Guid? spaceId = default(System.Guid?), SpaceRetrieve space = default(SpaceRetrieve), string friendlyName = default(string), string description = default(string), string fullName = default(string), System.Collections.Generic.IList<string> spacePaths = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<OntologyRetrieve> ontologies = default(System.Collections.Generic.IList<OntologyRetrieve>))
        {
            Id = id;
            SpaceId = spaceId;
            Space = space;
            Category = category;
            Name = name;
            Disabled = disabled;
            LogicalOrder = logicalOrder;
            FriendlyName = friendlyName;
            Description = description;
            FullName = fullName;
            SpacePaths = spacePaths;
            Ontologies = ontologies;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets type identifier
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets parent space Id.
        /// If specified, the type is available to this space topology (custom
        /// type).
        /// If not, the type is available to all spaces (system type).
        /// </summary>
        [JsonProperty(PropertyName = "spaceId")]
        public System.Guid? SpaceId { get; set; }

        /// <summary>
        /// Gets or sets parent space
        /// </summary>
        [JsonProperty(PropertyName = "space")]
        public SpaceRetrieve Space { get; set; }

        /// <summary>
        /// Gets or sets the type's category, for example SensorPortType.
        /// Possible values include: 'DeviceSubtype', 'DeviceType',
        /// 'DeviceBlobSubtype', 'DeviceBlobType', 'SensorDataSubtype',
        /// 'SensorDataType', 'SensorDataUnitType', 'SensorPortType',
        /// 'SensorType', 'SpaceBlobSubtype', 'SpaceBlobType', 'SpaceStatus',
        /// 'SpaceSubtype', 'SpaceType', 'UserBlobSubtype', 'UserBlobType'
        /// </summary>
        [JsonProperty(PropertyName = "category")]
        public string Category { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets if disabled, a type cannot be be referenced.
        /// This can be used to remove types from loaded ontologies or to
        /// prevent "wrong" type names from being created.
        /// For example, creating a disabled type called 'Temp' will enforce
        /// using Temperature instead
        /// </summary>
        [JsonProperty(PropertyName = "disabled")]
        public bool Disabled { get; set; }

        /// <summary>
        /// Gets or sets display logical ordering
        /// </summary>
        [JsonProperty(PropertyName = "logicalOrder")]
        public int LogicalOrder { get; set; }

        /// <summary>
        /// Gets or sets optional friendly name
        /// </summary>
        [JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fullName")]
        public string FullName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "spacePaths")]
        public System.Collections.Generic.IList<string> SpacePaths { get; set; }

        /// <summary>
        /// Gets or sets list of ontologies this type belongs to
        /// </summary>
        [JsonProperty(PropertyName = "ontologies")]
        public System.Collections.Generic.IList<OntologyRetrieve> Ontologies { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Category == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Category");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Space != null)
            {
                Space.Validate();
            }
            if (Ontologies != null)
            {
                foreach (var element in Ontologies)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
