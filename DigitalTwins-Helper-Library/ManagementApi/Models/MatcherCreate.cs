// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class MatcherCreate
    {
        /// <summary>
        /// Initializes a new instance of the MatcherCreate class.
        /// </summary>
        public MatcherCreate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MatcherCreate class.
        /// </summary>
        /// <param name="name">The name</param>
        /// <param name="description">Optional description</param>
        /// <param name="friendlyName">Optional friendly name</param>
        /// <param name="conditions">List of conditions that all need to
        /// evaluate to true for a given sensor to match</param>
        /// <param name="spaceId">Parent space</param>
        public MatcherCreate(string name, string description = default(string), string friendlyName = default(string), System.Collections.Generic.IList<ConditionCreate> conditions = default(System.Collections.Generic.IList<ConditionCreate>), System.Guid? spaceId = default(System.Guid?))
        {
            Name = name;
            Description = description;
            FriendlyName = friendlyName;
            Conditions = conditions;
            SpaceId = spaceId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets optional description
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets optional friendly name
        /// </summary>
        [JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// Gets or sets list of conditions that all need to evaluate to true
        /// for a given sensor to match
        /// </summary>
        [JsonProperty(PropertyName = "conditions")]
        public System.Collections.Generic.IList<ConditionCreate> Conditions { get; set; }

        /// <summary>
        /// Gets or sets parent space
        /// </summary>
        [JsonProperty(PropertyName = "spaceId")]
        public System.Guid? SpaceId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Name != null)
            {
                if (Name.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 64);
                }
                if (Name.Length < 3)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 3);
                }
            }
            if (Description != null)
            {
                if (Description.Length > 4000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 4000);
                }
                if (Description.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Description", 0);
                }
            }
            if (FriendlyName != null)
            {
                if (FriendlyName.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "FriendlyName", 64);
                }
                if (FriendlyName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "FriendlyName", 0);
                }
            }
        }
    }
}
