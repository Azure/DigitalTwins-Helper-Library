// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Location
    {
        /// <summary>
        /// Initializes a new instance of the Location class.
        /// </summary>
        public Location()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Location class.
        /// </summary>
        /// <param name="longitude">Longitude coordinate</param>
        /// <param name="latitude">Latitude coordinate</param>
        /// <param name="elevation">Optional elevation, in meters</param>
        /// <param name="measure">Optional measure, in meters</param>
        public Location(double longitude, double latitude, double? elevation = default(double?), double? measure = default(double?))
        {
            Longitude = longitude;
            Latitude = latitude;
            Elevation = elevation;
            Measure = measure;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets longitude coordinate
        /// </summary>
        [JsonProperty(PropertyName = "longitude")]
        public double Longitude { get; set; }

        /// <summary>
        /// Gets or sets latitude coordinate
        /// </summary>
        [JsonProperty(PropertyName = "latitude")]
        public double Latitude { get; set; }

        /// <summary>
        /// Gets or sets optional elevation, in meters
        /// </summary>
        [JsonProperty(PropertyName = "elevation")]
        public double? Elevation { get; set; }

        /// <summary>
        /// Gets or sets optional measure, in meters
        /// </summary>
        [JsonProperty(PropertyName = "measure")]
        public double? Measure { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
