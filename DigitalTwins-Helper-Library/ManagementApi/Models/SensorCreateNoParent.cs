// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class SensorCreateNoParent
    {
        /// <summary>
        /// Initializes a new instance of the SensorCreateNoParent class.
        /// </summary>
        public SensorCreateNoParent()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SensorCreateNoParent class.
        /// </summary>
        /// <param name="port">Serial port the sensor connects to on the
        /// device</param>
        /// <param name="pollRate">Poll rate for data collection from the
        /// sensor</param>
        /// <param name="dataType">Type of data reported by the sensor</param>
        /// <param name="type">Type of sensor</param>
        /// <param name="portType">Type of port; for example AnalogInput.
        /// Defaults to None</param>
        /// <param name="dataUnitType">Type of unit; for example
        /// CelsiusTemperature if DataType is set to Temperature. Defaults to
        /// None</param>
        /// <param name="dataSubtype">Subtype for the data; for example
        /// OutsideTemperature if DataType is set to Temperature. Defaults to
        /// None</param>
        /// <param name="spaceId">Parent space Id. If not specified, the
        /// device's parent space is used</param>
        /// <param name="portTypeId">Port type identifier. Cannot specify both
        /// PortType and PortTypeId</param>
        /// <param name="dataUnitTypeId">Data type unit identifier. Cannot
        /// specify both DataUnitType and DataUnitTypeId</param>
        /// <param name="typeId">Type identifier. Cannot specify both Type and
        /// TypeId</param>
        /// <param name="dataTypeId">Data type identifier. Cannot specify both
        /// DataType and DataTypeId</param>
        /// <param name="dataSubtypeId">Data subtype identifier. Cannot specify
        /// both DataSubtype and DataSubtypeId</param>
        /// <param name="hardwareId">Hardware unique identifier, such as MAC
        /// address. If left unspecified, set to a random Guid string.</param>
        public SensorCreateNoParent(string port = default(string), int? pollRate = default(int?), string dataType = default(string), string type = default(string), string portType = default(string), string dataUnitType = default(string), string dataSubtype = default(string), System.Guid? spaceId = default(System.Guid?), Location location = default(Location), int? portTypeId = default(int?), int? dataUnitTypeId = default(int?), int? typeId = default(int?), int? dataTypeId = default(int?), int? dataSubtypeId = default(int?), string hardwareId = default(string), System.Collections.Generic.IList<ExtendedPropertyCreate> properties = default(System.Collections.Generic.IList<ExtendedPropertyCreate>))
        {
            Port = port;
            PollRate = pollRate;
            DataType = dataType;
            Type = type;
            PortType = portType;
            DataUnitType = dataUnitType;
            DataSubtype = dataSubtype;
            SpaceId = spaceId;
            Location = location;
            PortTypeId = portTypeId;
            DataUnitTypeId = dataUnitTypeId;
            TypeId = typeId;
            DataTypeId = dataTypeId;
            DataSubtypeId = dataSubtypeId;
            HardwareId = hardwareId;
            Properties = properties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets serial port the sensor connects to on the device
        /// </summary>
        [JsonProperty(PropertyName = "port")]
        public string Port { get; set; }

        /// <summary>
        /// Gets or sets poll rate for data collection from the sensor
        /// </summary>
        [JsonProperty(PropertyName = "pollRate")]
        public int? PollRate { get; set; }

        /// <summary>
        /// Gets or sets type of data reported by the sensor
        /// </summary>
        [JsonProperty(PropertyName = "dataType")]
        public string DataType { get; set; }

        /// <summary>
        /// Gets or sets type of sensor
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets type of port; for example AnalogInput. Defaults to
        /// None
        /// </summary>
        [JsonProperty(PropertyName = "portType")]
        public string PortType { get; set; }

        /// <summary>
        /// Gets or sets type of unit; for example CelsiusTemperature if
        /// DataType is set to Temperature. Defaults to None
        /// </summary>
        [JsonProperty(PropertyName = "dataUnitType")]
        public string DataUnitType { get; set; }

        /// <summary>
        /// Gets or sets subtype for the data; for example OutsideTemperature
        /// if DataType is set to Temperature. Defaults to None
        /// </summary>
        [JsonProperty(PropertyName = "dataSubtype")]
        public string DataSubtype { get; set; }

        /// <summary>
        /// Gets or sets parent space Id. If not specified, the device's parent
        /// space is used
        /// </summary>
        [JsonProperty(PropertyName = "spaceId")]
        public System.Guid? SpaceId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or sets port type identifier. Cannot specify both PortType and
        /// PortTypeId
        /// </summary>
        [JsonProperty(PropertyName = "portTypeId")]
        public int? PortTypeId { get; set; }

        /// <summary>
        /// Gets or sets data type unit identifier. Cannot specify both
        /// DataUnitType and DataUnitTypeId
        /// </summary>
        [JsonProperty(PropertyName = "dataUnitTypeId")]
        public int? DataUnitTypeId { get; set; }

        /// <summary>
        /// Gets or sets type identifier. Cannot specify both Type and TypeId
        /// </summary>
        [JsonProperty(PropertyName = "typeId")]
        public int? TypeId { get; set; }

        /// <summary>
        /// Gets or sets data type identifier. Cannot specify both DataType and
        /// DataTypeId
        /// </summary>
        [JsonProperty(PropertyName = "dataTypeId")]
        public int? DataTypeId { get; set; }

        /// <summary>
        /// Gets or sets data subtype identifier. Cannot specify both
        /// DataSubtype and DataSubtypeId
        /// </summary>
        [JsonProperty(PropertyName = "dataSubtypeId")]
        public int? DataSubtypeId { get; set; }

        /// <summary>
        /// Gets or sets hardware unique identifier, such as MAC address. If
        /// left unspecified, set to a random Guid string.
        /// </summary>
        [JsonProperty(PropertyName = "hardwareId")]
        public string HardwareId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public System.Collections.Generic.IList<ExtendedPropertyCreate> Properties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Port != null)
            {
                if (Port.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Port", 20);
                }
                if (Port.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Port", 0);
                }
            }
            if (Location != null)
            {
                Location.Validate();
            }
            if (HardwareId != null)
            {
                if (HardwareId.Length > 72)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "HardwareId", 72);
                }
                if (HardwareId.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "HardwareId", 0);
                }
            }
            if (Properties != null)
            {
                foreach (var element in Properties)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
