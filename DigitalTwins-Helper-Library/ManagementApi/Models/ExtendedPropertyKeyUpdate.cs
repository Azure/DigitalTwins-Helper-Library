// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ExtendedPropertyKeyUpdate
    {
        /// <summary>
        /// Initializes a new instance of the ExtendedPropertyKeyUpdate class.
        /// </summary>
        public ExtendedPropertyKeyUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExtendedPropertyKeyUpdate class.
        /// </summary>
        /// <param name="name">Key name. Must be unique for a given space. Can
        /// only contain alphanumeric or underscore characters</param>
        /// <param name="category">Category used for permissioning and
        /// filtering</param>
        /// <param name="spaceId">Parent space</param>
        /// <param name="validationData">Optional field used to validate
        /// property values.
        /// - For string: an optional regular expression
        /// - For enum or set: a ';' delimited list of possible alphanumeric
        /// values
        /// - For JSON: an optional JSON schema</param>
        /// <param name="min">Optional field used to limit the range of
        /// property values.
        /// - For value types (int, long, datetime) the boundary value.
        /// - For string and JSON the number of characters.
        /// - For Set the number of elements.</param>
        /// <param name="max">Optional field used to limit the range of
        /// property values.
        /// - For value types (int, long, datetime) the boundary value.
        /// - For string and JSON the number of characters.
        /// - For Set the number of elements.</param>
        public ExtendedPropertyKeyUpdate(string name = default(string), string category = default(string), string description = default(string), System.Guid? spaceId = default(System.Guid?), string validationData = default(string), string min = default(string), string max = default(string))
        {
            Name = name;
            Category = category;
            Description = description;
            SpaceId = spaceId;
            ValidationData = validationData;
            Min = min;
            Max = max;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets key name. Must be unique for a given space. Can only
        /// contain alphanumeric or underscore characters
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets category used for permissioning and filtering
        /// </summary>
        [JsonProperty(PropertyName = "category")]
        public string Category { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets parent space
        /// </summary>
        [JsonProperty(PropertyName = "spaceId")]
        public System.Guid? SpaceId { get; set; }

        /// <summary>
        /// Gets or sets optional field used to validate property values.
        /// - For string: an optional regular expression
        /// - For enum or set: a ';' delimited list of possible alphanumeric
        /// values
        /// - For JSON: an optional JSON schema
        /// </summary>
        [JsonProperty(PropertyName = "validationData")]
        public string ValidationData { get; set; }

        /// <summary>
        /// Gets or sets optional field used to limit the range of property
        /// values.
        /// - For value types (int, long, datetime) the boundary value.
        /// - For string and JSON the number of characters.
        /// - For Set the number of elements.
        /// </summary>
        [JsonProperty(PropertyName = "min")]
        public string Min { get; set; }

        /// <summary>
        /// Gets or sets optional field used to limit the range of property
        /// values.
        /// - For value types (int, long, datetime) the boundary value.
        /// - For string and JSON the number of characters.
        /// - For Set the number of elements.
        /// </summary>
        [JsonProperty(PropertyName = "max")]
        public string Max { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name != null)
            {
                if (Name.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 50);
                }
                if (Name.Length < 3)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 3);
                }
            }
            if (Category != null)
            {
                if (Category.Length > 15)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Category", 15);
                }
                if (Category.Length < 4)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Category", 4);
                }
            }
            if (Description != null)
            {
                if (Description.Length > 4000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 4000);
                }
                if (Description.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Description", 0);
                }
            }
            if (ValidationData != null)
            {
                if (ValidationData.Length > 2000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ValidationData", 2000);
                }
                if (ValidationData.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ValidationData", 0);
                }
            }
            if (Min != null)
            {
                if (Min.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Min", 20);
                }
                if (Min.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Min", 0);
                }
            }
            if (Max != null)
            {
                if (Max.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Max", 20);
                }
                if (Max.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Max", 0);
                }
            }
        }
    }
}
