// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Device retrieve model
    /// </summary>
    public partial class DeviceRetrieve
    {
        /// <summary>
        /// Initializes a new instance of the DeviceRetrieve class.
        /// </summary>
        public DeviceRetrieve()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DeviceRetrieve class.
        /// </summary>
        /// <param name="typeId">Device type identifier</param>
        /// <param name="subtypeId">Device subtype identifier</param>
        /// <param name="hardwareId">Hardware unique identifier, such as MAC
        /// address.</param>
        /// <param name="spaceId">Parent space id</param>
        /// <param name="status">The status. Possible values include:
        /// 'Provisioned', 'Active', 'Offline', 'Disabled'</param>
        /// <param name="id">The identifier</param>
        /// <param name="friendlyName">Optional friendly name</param>
        /// <param name="type">Device type</param>
        /// <param name="subtype">Device subtype</param>
        /// <param name="gatewayId">Optional free-form gateway
        /// identifier</param>
        /// <param name="connectionState">The connection state of the device.
        /// Possible values include: 'Connected', 'Disconnected'</param>
        /// <param name="connectionStateUpdatedTime">The time when
        /// {ModernIoT.Data.DataModel.DeviceRetrieve.ConnectionState} was last
        /// updated.</param>
        /// <param name="ioTHubUrl">The IoT hub url</param>
        /// <param name="deviceKey">The IoT hub device key</param>
        /// <param name="sasToken">The IoT hub SAS token</param>
        /// <param name="connectionString">The device connection string</param>
        /// <param name="space">Parent space</param>
        /// <param name="sensors">Child sensors</param>
        /// <param name="iotHubResource">IoT hub resource</param>
        /// <param name="roleAssignments">The role assignments associated with
        /// the device.</param>
        public DeviceRetrieve(string name, int typeId, int subtypeId, string hardwareId, System.Guid spaceId, string status, System.Guid id, string friendlyName = default(string), string description = default(string), string type = default(string), string subtype = default(string), string gatewayId = default(string), Location location = default(Location), string connectionState = default(string), System.DateTime? connectionStateUpdatedTime = default(System.DateTime?), string ioTHubUrl = default(string), string deviceKey = default(string), string sasToken = default(string), string connectionString = default(string), SpaceRetrieve space = default(SpaceRetrieve), System.Collections.Generic.IList<SensorRetrieve> sensors = default(System.Collections.Generic.IList<SensorRetrieve>), string fullName = default(string), System.Collections.Generic.IList<string> spacePaths = default(System.Collections.Generic.IList<string>), Location effectiveLocation = default(Location), System.Collections.Generic.IList<ExtendedPropertyRetrieve> properties = default(System.Collections.Generic.IList<ExtendedPropertyRetrieve>), SpaceResourceRetrieve iotHubResource = default(SpaceResourceRetrieve), System.Collections.Generic.IList<RoleAssignmentRetrieve> roleAssignments = default(System.Collections.Generic.IList<RoleAssignmentRetrieve>))
        {
            Name = name;
            FriendlyName = friendlyName;
            Description = description;
            Type = type;
            Subtype = subtype;
            TypeId = typeId;
            SubtypeId = subtypeId;
            HardwareId = hardwareId;
            GatewayId = gatewayId;
            SpaceId = spaceId;
            Status = status;
            Location = location;
            Id = id;
            ConnectionState = connectionState;
            ConnectionStateUpdatedTime = connectionStateUpdatedTime;
            IoTHubUrl = ioTHubUrl;
            DeviceKey = deviceKey;
            SasToken = sasToken;
            ConnectionString = connectionString;
            Space = space;
            Sensors = sensors;
            FullName = fullName;
            SpacePaths = spacePaths;
            EffectiveLocation = effectiveLocation;
            Properties = properties;
            IotHubResource = iotHubResource;
            RoleAssignments = roleAssignments;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets optional friendly name
        /// </summary>
        [JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets device type
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets device subtype
        /// </summary>
        [JsonProperty(PropertyName = "subtype")]
        public string Subtype { get; set; }

        /// <summary>
        /// Gets or sets device type identifier
        /// </summary>
        [JsonProperty(PropertyName = "typeId")]
        public int TypeId { get; set; }

        /// <summary>
        /// Gets or sets device subtype identifier
        /// </summary>
        [JsonProperty(PropertyName = "subtypeId")]
        public int SubtypeId { get; set; }

        /// <summary>
        /// Gets or sets hardware unique identifier, such as MAC address.
        /// </summary>
        [JsonProperty(PropertyName = "hardwareId")]
        public string HardwareId { get; set; }

        /// <summary>
        /// Gets or sets optional free-form gateway identifier
        /// </summary>
        [JsonProperty(PropertyName = "gatewayId")]
        public string GatewayId { get; set; }

        /// <summary>
        /// Gets or sets parent space id
        /// </summary>
        [JsonProperty(PropertyName = "spaceId")]
        public System.Guid SpaceId { get; set; }

        /// <summary>
        /// Gets or sets the status. Possible values include: 'Provisioned',
        /// 'Active', 'Offline', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or sets the identifier
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the connection state of the device. Possible values
        /// include: 'Connected', 'Disconnected'
        /// </summary>
        [JsonProperty(PropertyName = "connectionState")]
        public string ConnectionState { get; set; }

        /// <summary>
        /// Gets or sets the time when
        /// {ModernIoT.Data.DataModel.DeviceRetrieve.ConnectionState} was last
        /// updated.
        /// </summary>
        [JsonProperty(PropertyName = "connectionStateUpdatedTime")]
        public System.DateTime? ConnectionStateUpdatedTime { get; set; }

        /// <summary>
        /// Gets or sets the IoT hub url
        /// </summary>
        [JsonProperty(PropertyName = "ioTHubUrl")]
        public string IoTHubUrl { get; set; }

        /// <summary>
        /// Gets or sets the IoT hub device key
        /// </summary>
        [JsonProperty(PropertyName = "deviceKey")]
        public string DeviceKey { get; set; }

        /// <summary>
        /// Gets or sets the IoT hub SAS token
        /// </summary>
        [JsonProperty(PropertyName = "sasToken")]
        public string SasToken { get; set; }

        /// <summary>
        /// Gets or sets the device connection string
        /// </summary>
        [JsonProperty(PropertyName = "connectionString")]
        public string ConnectionString { get; set; }

        /// <summary>
        /// Gets or sets parent space
        /// </summary>
        [JsonProperty(PropertyName = "space")]
        public SpaceRetrieve Space { get; set; }

        /// <summary>
        /// Gets or sets child sensors
        /// </summary>
        [JsonProperty(PropertyName = "sensors")]
        public System.Collections.Generic.IList<SensorRetrieve> Sensors { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fullName")]
        public string FullName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "spacePaths")]
        public System.Collections.Generic.IList<string> SpacePaths { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "effectiveLocation")]
        public Location EffectiveLocation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public System.Collections.Generic.IList<ExtendedPropertyRetrieve> Properties { get; set; }

        /// <summary>
        /// Gets or sets ioT hub resource
        /// </summary>
        [JsonProperty(PropertyName = "iotHubResource")]
        public SpaceResourceRetrieve IotHubResource { get; set; }

        /// <summary>
        /// Gets or sets the role assignments associated with the device.
        /// </summary>
        [JsonProperty(PropertyName = "roleAssignments")]
        public System.Collections.Generic.IList<RoleAssignmentRetrieve> RoleAssignments { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (HardwareId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "HardwareId");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (Location != null)
            {
                Location.Validate();
            }
            if (Space != null)
            {
                Space.Validate();
            }
            if (Sensors != null)
            {
                foreach (var element in Sensors)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (EffectiveLocation != null)
            {
                EffectiveLocation.Validate();
            }
            if (IotHubResource != null)
            {
                IotHubResource.Validate();
            }
            if (RoleAssignments != null)
            {
                foreach (var element1 in RoleAssignments)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
