// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Device update model
    /// </summary>
    public partial class DeviceUpdate
    {
        /// <summary>
        /// Initializes a new instance of the DeviceUpdate class.
        /// </summary>
        public DeviceUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DeviceUpdate class.
        /// </summary>
        /// <param name="friendlyName">Optional friendly name</param>
        /// <param name="hardwareId">Hardware unique identifier, such as MAC
        /// address.</param>
        /// <param name="gatewayId">Optional free-form gateway
        /// identifier</param>
        /// <param name="spaceId">Parent space id</param>
        /// <param name="status">The status. Possible values include:
        /// 'Provisioned', 'Active', 'Offline', 'Disabled'</param>
        /// <param name="location">Optional physical location, or a location of
        /// (0,0) to reset to no location</param>
        /// <param name="type">Device type</param>
        /// <param name="typeId">Device type identifier. Cannot specify both
        /// Type and TypeId</param>
        /// <param name="subtype">Device subtype</param>
        /// <param name="subtypeId">Device subtype identifier. Cannot specify
        /// both Subtype and SubtypeId</param>
        public DeviceUpdate(string name = default(string), string friendlyName = default(string), string description = default(string), string hardwareId = default(string), string gatewayId = default(string), System.Guid? spaceId = default(System.Guid?), string status = default(string), Location location = default(Location), string type = default(string), int? typeId = default(int?), string subtype = default(string), int? subtypeId = default(int?))
        {
            Name = name;
            FriendlyName = friendlyName;
            Description = description;
            HardwareId = hardwareId;
            GatewayId = gatewayId;
            SpaceId = spaceId;
            Status = status;
            Location = location;
            Type = type;
            TypeId = typeId;
            Subtype = subtype;
            SubtypeId = subtypeId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets optional friendly name
        /// </summary>
        [JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets hardware unique identifier, such as MAC address.
        /// </summary>
        [JsonProperty(PropertyName = "hardwareId")]
        public string HardwareId { get; set; }

        /// <summary>
        /// Gets or sets optional free-form gateway identifier
        /// </summary>
        [JsonProperty(PropertyName = "gatewayId")]
        public string GatewayId { get; set; }

        /// <summary>
        /// Gets or sets parent space id
        /// </summary>
        [JsonProperty(PropertyName = "spaceId")]
        public System.Guid? SpaceId { get; set; }

        /// <summary>
        /// Gets or sets the status. Possible values include: 'Provisioned',
        /// 'Active', 'Offline', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets optional physical location, or a location of (0,0) to
        /// reset to no location
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or sets device type
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets device type identifier. Cannot specify both Type and
        /// TypeId
        /// </summary>
        [JsonProperty(PropertyName = "typeId")]
        public int? TypeId { get; set; }

        /// <summary>
        /// Gets or sets device subtype
        /// </summary>
        [JsonProperty(PropertyName = "subtype")]
        public string Subtype { get; set; }

        /// <summary>
        /// Gets or sets device subtype identifier. Cannot specify both Subtype
        /// and SubtypeId
        /// </summary>
        [JsonProperty(PropertyName = "subtypeId")]
        public int? SubtypeId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name != null)
            {
                if (Name.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 64);
                }
                if (Name.Length < 3)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 3);
                }
            }
            if (FriendlyName != null)
            {
                if (FriendlyName.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "FriendlyName", 64);
                }
                if (FriendlyName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "FriendlyName", 0);
                }
            }
            if (Description != null)
            {
                if (Description.Length > 4000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 4000);
                }
                if (Description.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Description", 0);
                }
            }
            if (HardwareId != null)
            {
                if (HardwareId.Length > 36)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "HardwareId", 36);
                }
                if (HardwareId.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "HardwareId", 0);
                }
            }
            if (GatewayId != null)
            {
                if (GatewayId.Length > 36)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "GatewayId", 36);
                }
                if (GatewayId.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "GatewayId", 0);
                }
            }
            if (Location != null)
            {
                Location.Validate();
            }
        }
    }
}
