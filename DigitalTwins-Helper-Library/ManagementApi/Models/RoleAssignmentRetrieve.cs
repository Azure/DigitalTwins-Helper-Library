// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class RoleAssignmentRetrieve
    {
        /// <summary>
        /// Initializes a new instance of the RoleAssignmentRetrieve class.
        /// </summary>
        public RoleAssignmentRetrieve()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RoleAssignmentRetrieve class.
        /// </summary>
        /// <param name="id">The Role Assignment identifier.</param>
        /// <param name="roleId">The role definition identifier. Role
        /// definitions and their identifiers can be found by querying the
        /// system API.</param>
        /// <param name="objectId">The object id for the role assignment that
        /// must be formatted according to its associated type.
        /// For the DomainName ObjectIdType, ObjectId must begin with the "@"
        /// character.</param>
        /// <param name="path">The access path.</param>
        /// <param name="objectIdType">The type of the role assignment. With
        /// the exception of the DeviceId type, the types correspond to
        /// properties of an AAD object. The DeviceId type corresponds to
        /// the device id in the topology.
        /// The UserId type assigns a role to a user.
        /// The DeviceId type assigns a role to a device.
        /// The DomainName type assigns a role to a domain name. Each user with
        /// the specified domain name will have the access rights of the
        /// corresponding role.
        /// The TenantId type assigns a role to a tenant. Each user belonging
        /// to the specified tenant id will have the access rights of the
        /// corresponding role.
        /// The ServicePrincipalId type assigns a role to a service principal
        /// object id. Possible values include: 'UserId', 'DeviceId',
        /// 'DomainName', 'TenantId', 'ServicePrincipalId',
        /// 'UserDefinedFunctionId'</param>
        /// <param name="tenantId">The tenant identifier.
        /// Disallowed for DeviceId and TenantId ObjectIdTypes.
        /// Required for UserId and ServicePrincipalId ObjectIdTypes.
        /// Optional for the DomainName ObjectIdType.</param>
        public RoleAssignmentRetrieve(System.Guid id, System.Guid roleId, string objectId, string path, string objectIdType = default(string), System.Guid? tenantId = default(System.Guid?))
        {
            Id = id;
            RoleId = roleId;
            ObjectId = objectId;
            ObjectIdType = objectIdType;
            TenantId = tenantId;
            Path = path;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Role Assignment identifier.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the role definition identifier. Role definitions and
        /// their identifiers can be found by querying the system API.
        /// </summary>
        [JsonProperty(PropertyName = "roleId")]
        public System.Guid RoleId { get; set; }

        /// <summary>
        /// Gets or sets the object id for the role assignment that must be
        /// formatted according to its associated type.
        /// For the DomainName ObjectIdType, ObjectId must begin with the "@"
        /// character.
        /// </summary>
        [JsonProperty(PropertyName = "objectId")]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets or sets the type of the role assignment. With the exception of
        /// the DeviceId type, the types correspond to properties of an AAD
        /// object. The DeviceId type corresponds to
        /// the device id in the topology.
        /// The UserId type assigns a role to a user.
        /// The DeviceId type assigns a role to a device.
        /// The DomainName type assigns a role to a domain name. Each user with
        /// the specified domain name will have the access rights of the
        /// corresponding role.
        /// The TenantId type assigns a role to a tenant. Each user belonging
        /// to the specified tenant id will have the access rights of the
        /// corresponding role.
        /// The ServicePrincipalId type assigns a role to a service principal
        /// object id. Possible values include: 'UserId', 'DeviceId',
        /// 'DomainName', 'TenantId', 'ServicePrincipalId',
        /// 'UserDefinedFunctionId'
        /// </summary>
        [JsonProperty(PropertyName = "objectIdType")]
        public string ObjectIdType { get; set; }

        /// <summary>
        /// Gets or sets the tenant identifier.
        /// Disallowed for DeviceId and TenantId ObjectIdTypes.
        /// Required for UserId and ServicePrincipalId ObjectIdTypes.
        /// Optional for the DomainName ObjectIdType.
        /// </summary>
        [JsonProperty(PropertyName = "tenantId")]
        public System.Guid? TenantId { get; set; }

        /// <summary>
        /// Gets or sets the access path.
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ObjectId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ObjectId");
            }
            if (Path == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Path");
            }
        }
    }
}
