// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ExtendedTypeCreate
    {
        /// <summary>
        /// Initializes a new instance of the ExtendedTypeCreate class.
        /// </summary>
        public ExtendedTypeCreate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExtendedTypeCreate class.
        /// </summary>
        /// <param name="category">The type's category, for example
        /// SensorPortType. Possible values include: 'DeviceSubtype',
        /// 'DeviceType', 'DeviceBlobSubtype', 'DeviceBlobType',
        /// 'SensorDataSubtype', 'SensorDataType', 'SensorDataUnitType',
        /// 'SensorPortType', 'SensorType', 'SpaceBlobSubtype',
        /// 'SpaceBlobType', 'SpaceStatus', 'SpaceSubtype', 'SpaceType',
        /// 'UserBlobSubtype', 'UserBlobType'</param>
        /// <param name="spaceId">Parent space Id. An extended type is
        /// available to all spaces within the specified space topology</param>
        /// <param name="name">Type name. Must be unique for the given space
        /// and category. Can only contain alphanumeric or underscore
        /// characters.</param>
        /// <param name="friendlyName">Optional friendly name</param>
        /// <param name="description">Optional description</param>
        /// <param name="disabled">If disabled, a type cannot be be referenced.
        /// This can be used to remove types from loaded ontologies or to
        /// prevent "wrong" type names from being created.
        /// For example, creating a disabled type called 'Temp' will enforce
        /// using Temperature instead</param>
        /// <param name="logicalOrder">Display logical ordering</param>
        public ExtendedTypeCreate(string category, System.Guid spaceId, string name, string friendlyName = default(string), string description = default(string), bool? disabled = default(bool?), int? logicalOrder = default(int?))
        {
            Category = category;
            SpaceId = spaceId;
            Name = name;
            FriendlyName = friendlyName;
            Description = description;
            Disabled = disabled;
            LogicalOrder = logicalOrder;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the type's category, for example SensorPortType.
        /// Possible values include: 'DeviceSubtype', 'DeviceType',
        /// 'DeviceBlobSubtype', 'DeviceBlobType', 'SensorDataSubtype',
        /// 'SensorDataType', 'SensorDataUnitType', 'SensorPortType',
        /// 'SensorType', 'SpaceBlobSubtype', 'SpaceBlobType', 'SpaceStatus',
        /// 'SpaceSubtype', 'SpaceType', 'UserBlobSubtype', 'UserBlobType'
        /// </summary>
        [JsonProperty(PropertyName = "category")]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets parent space Id. An extended type is available to all
        /// spaces within the specified space topology
        /// </summary>
        [JsonProperty(PropertyName = "spaceId")]
        public System.Guid SpaceId { get; set; }

        /// <summary>
        /// Gets or sets type name. Must be unique for the given space and
        /// category. Can only contain alphanumeric or underscore characters.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets optional friendly name
        /// </summary>
        [JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// Gets or sets optional description
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets if disabled, a type cannot be be referenced.
        /// This can be used to remove types from loaded ontologies or to
        /// prevent "wrong" type names from being created.
        /// For example, creating a disabled type called 'Temp' will enforce
        /// using Temperature instead
        /// </summary>
        [JsonProperty(PropertyName = "disabled")]
        public bool? Disabled { get; set; }

        /// <summary>
        /// Gets or sets display logical ordering
        /// </summary>
        [JsonProperty(PropertyName = "logicalOrder")]
        public int? LogicalOrder { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Category == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Category");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Name != null)
            {
                if (Name.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 50);
                }
                if (Name.Length < 3)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 3);
                }
            }
            if (FriendlyName != null)
            {
                if (FriendlyName.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "FriendlyName", 64);
                }
                if (FriendlyName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "FriendlyName", 0);
                }
            }
            if (Description != null)
            {
                if (Description.Length > 4000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 4000);
                }
                if (Description.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Description", 0);
                }
            }
        }
    }
}
