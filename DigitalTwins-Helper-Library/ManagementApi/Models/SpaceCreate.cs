// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Space create model
    /// </summary>
    public partial class SpaceCreate
    {
        /// <summary>
        /// Initializes a new instance of the SpaceCreate class.
        /// </summary>
        public SpaceCreate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SpaceCreate class.
        /// </summary>
        /// <param name="friendlyName">Optional friendly name</param>
        /// <param name="type">Primary space type. Defaults to None if not
        /// specified</param>
        /// <param name="typeId">Type identifier. Cannot specify both Type and
        /// TypeId</param>
        /// <param name="parentSpaceId">The space's parent space</param>
        /// <param name="subtype">Space subtype. Defaults to None if not
        /// specified</param>
        /// <param name="subtypeId">Subtype identifier. Cannot specify both
        /// Subtype and SubtypeId</param>
        /// <param name="location">Optional physical location for the
        /// space</param>
        /// <param name="timeZoneId">Optional time zone identifier for the
        /// space</param>
        /// <param name="status">Optional status. Defaults to None if not
        /// specified</param>
        /// <param name="statusId">Status identifier. Cannot specify both
        /// Status and StatusId</param>
        /// <param name="timeZoneName">Optional time zone name. Cannot specify
        /// both TimeZoneId and TimeZoneName.</param>
        /// <param name="children">Child spaces</param>
        /// <param name="users">Associated users</param>
        public SpaceCreate(string name, string description = default(string), string friendlyName = default(string), string type = default(string), int? typeId = default(int?), System.Guid? parentSpaceId = default(System.Guid?), string subtype = default(string), int? subtypeId = default(int?), Location location = default(Location), int? timeZoneId = default(int?), string status = default(string), int? statusId = default(int?), System.Collections.Generic.IList<ExtendedPropertyCreate> properties = default(System.Collections.Generic.IList<ExtendedPropertyCreate>), string timeZoneName = default(string), System.Collections.Generic.IList<SpaceCreate> children = default(System.Collections.Generic.IList<SpaceCreate>), System.Collections.Generic.IList<UserCreate> users = default(System.Collections.Generic.IList<UserCreate>))
        {
            Name = name;
            Description = description;
            FriendlyName = friendlyName;
            Type = type;
            TypeId = typeId;
            ParentSpaceId = parentSpaceId;
            Subtype = subtype;
            SubtypeId = subtypeId;
            Location = location;
            TimeZoneId = timeZoneId;
            Status = status;
            StatusId = statusId;
            Properties = properties;
            TimeZoneName = timeZoneName;
            Children = children;
            Users = users;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets optional friendly name
        /// </summary>
        [JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// Gets or sets primary space type. Defaults to None if not specified
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets type identifier. Cannot specify both Type and TypeId
        /// </summary>
        [JsonProperty(PropertyName = "typeId")]
        public int? TypeId { get; set; }

        /// <summary>
        /// Gets or sets the space's parent space
        /// </summary>
        [JsonProperty(PropertyName = "parentSpaceId")]
        public System.Guid? ParentSpaceId { get; set; }

        /// <summary>
        /// Gets or sets space subtype. Defaults to None if not specified
        /// </summary>
        [JsonProperty(PropertyName = "subtype")]
        public string Subtype { get; set; }

        /// <summary>
        /// Gets or sets subtype identifier. Cannot specify both Subtype and
        /// SubtypeId
        /// </summary>
        [JsonProperty(PropertyName = "subtypeId")]
        public int? SubtypeId { get; set; }

        /// <summary>
        /// Gets or sets optional physical location for the space
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or sets optional time zone identifier for the space
        /// </summary>
        [JsonProperty(PropertyName = "timeZoneId")]
        public int? TimeZoneId { get; set; }

        /// <summary>
        /// Gets or sets optional status. Defaults to None if not specified
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets status identifier. Cannot specify both Status and
        /// StatusId
        /// </summary>
        [JsonProperty(PropertyName = "statusId")]
        public int? StatusId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public System.Collections.Generic.IList<ExtendedPropertyCreate> Properties { get; set; }

        /// <summary>
        /// Gets or sets optional time zone name. Cannot specify both
        /// TimeZoneId and TimeZoneName.
        /// </summary>
        [JsonProperty(PropertyName = "timeZoneName")]
        public string TimeZoneName { get; set; }

        /// <summary>
        /// Gets or sets child spaces
        /// </summary>
        [JsonProperty(PropertyName = "children")]
        public System.Collections.Generic.IList<SpaceCreate> Children { get; set; }

        /// <summary>
        /// Gets or sets associated users
        /// </summary>
        [JsonProperty(PropertyName = "users")]
        public System.Collections.Generic.IList<UserCreate> Users { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Name != null)
            {
                if (Name.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 64);
                }
                if (Name.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 1);
                }
            }
            if (Description != null)
            {
                if (Description.Length > 4000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 4000);
                }
                if (Description.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Description", 0);
                }
            }
            if (FriendlyName != null)
            {
                if (FriendlyName.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "FriendlyName", 64);
                }
                if (FriendlyName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "FriendlyName", 0);
                }
            }
            if (Location != null)
            {
                Location.Validate();
            }
            if (Properties != null)
            {
                foreach (var element in Properties)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Children != null)
            {
                foreach (var element1 in Children)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (Users != null)
            {
                foreach (var element2 in Users)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
        }
    }
}
