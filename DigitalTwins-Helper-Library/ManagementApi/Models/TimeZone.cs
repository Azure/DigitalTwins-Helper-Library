// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class TimeZone
    {
        /// <summary>
        /// Initializes a new instance of the TimeZone class.
        /// </summary>
        public TimeZone()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TimeZone class.
        /// </summary>
        /// <param name="accessControlType">Possible values include: 'None',
        /// 'Device', 'DeviceBlobMetadata', 'DeviceExtendedProperty',
        /// 'ExtendedPropertyKey', 'ExtendedType', 'Endpoint', 'KeyStore',
        /// 'Matcher', 'Ontology', 'Report', 'RoleDefinition', 'Sensor',
        /// 'SensorExtendedProperty', 'Space', 'SpaceBlobMetadata',
        /// 'SpaceExtendedProperty', 'SpaceResource', 'SpaceRoleAssignment',
        /// 'System', 'UserDefinedFunction', 'User', 'UserBlobMetadata',
        /// 'UserExtendedProperty'</param>
        public TimeZone(string name, int? id = default(int?), string accessControlPath = default(string), string friendlyPath = default(string), string accessControlType = default(string))
        {
            Id = id;
            Name = name;
            AccessControlPath = accessControlPath;
            FriendlyPath = friendlyPath;
            AccessControlType = accessControlType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "accessControlPath")]
        public string AccessControlPath { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "friendlyPath")]
        public string FriendlyPath { get; private set; }

        /// <summary>
        /// Gets possible values include: 'None', 'Device',
        /// 'DeviceBlobMetadata', 'DeviceExtendedProperty',
        /// 'ExtendedPropertyKey', 'ExtendedType', 'Endpoint', 'KeyStore',
        /// 'Matcher', 'Ontology', 'Report', 'RoleDefinition', 'Sensor',
        /// 'SensorExtendedProperty', 'Space', 'SpaceBlobMetadata',
        /// 'SpaceExtendedProperty', 'SpaceResource', 'SpaceRoleAssignment',
        /// 'System', 'UserDefinedFunction', 'User', 'UserBlobMetadata',
        /// 'UserExtendedProperty'
        /// </summary>
        [JsonProperty(PropertyName = "accessControlType")]
        public string AccessControlType { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Name != null)
            {
                if (Name.Length > 40)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 40);
                }
                if (Name.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 0);
                }
            }
        }
    }
}
