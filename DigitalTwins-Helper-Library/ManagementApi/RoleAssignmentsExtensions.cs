// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RoleAssignments.
    /// </summary>
    public static partial class RoleAssignmentsExtensions
    {
            /// <summary>
            /// Checks permissions for a given path, user, domain, tenant id, accessType
            /// and resource type
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path
            /// </param>
            /// <param name='userId'>
            /// The AAD user ObjectId
            /// </param>
            /// <param name='accessType'>
            /// The access type. Possible values include: 'None', 'Read', 'Create',
            /// 'Update', 'Delete'
            /// </param>
            /// <param name='resourceType'>
            /// The resource type. Possible values include: 'None', 'Device',
            /// 'DeviceBlobMetadata', 'DeviceExtendedProperty', 'ExtendedPropertyKey',
            /// 'ExtendedType', 'Endpoint', 'KeyStore', 'Matcher', 'Ontology', 'Report',
            /// 'RoleDefinition', 'Sensor', 'SensorExtendedProperty', 'Space',
            /// 'SpaceBlobMetadata', 'SpaceExtendedProperty', 'SpaceResource',
            /// 'SpaceRoleAssignment', 'System', 'UserDefinedFunction', 'User',
            /// 'UserBlobMetadata', 'UserExtendedProperty'
            /// </param>
            /// <param name='domain'>
            /// The domain to check preceded by the '@' character, or the upn that belongs
            /// to the user. Examples: `user@example.com`, `@example.com`
            /// </param>
            /// <param name='tenantId'>
            /// The AAD tenantId of the user, disallowed for GatewayDevice role assignments
            /// </param>
            public static bool? Check(this IRoleAssignments operations, string path, System.Guid userId, string accessType, string resourceType, string domain = "", System.Guid? tenantId = default(System.Guid?))
            {
                return operations.CheckAsync(path, userId, accessType, resourceType, domain, tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks permissions for a given path, user, domain, tenant id, accessType
            /// and resource type
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path
            /// </param>
            /// <param name='userId'>
            /// The AAD user ObjectId
            /// </param>
            /// <param name='accessType'>
            /// The access type. Possible values include: 'None', 'Read', 'Create',
            /// 'Update', 'Delete'
            /// </param>
            /// <param name='resourceType'>
            /// The resource type. Possible values include: 'None', 'Device',
            /// 'DeviceBlobMetadata', 'DeviceExtendedProperty', 'ExtendedPropertyKey',
            /// 'ExtendedType', 'Endpoint', 'KeyStore', 'Matcher', 'Ontology', 'Report',
            /// 'RoleDefinition', 'Sensor', 'SensorExtendedProperty', 'Space',
            /// 'SpaceBlobMetadata', 'SpaceExtendedProperty', 'SpaceResource',
            /// 'SpaceRoleAssignment', 'System', 'UserDefinedFunction', 'User',
            /// 'UserBlobMetadata', 'UserExtendedProperty'
            /// </param>
            /// <param name='domain'>
            /// The domain to check preceded by the '@' character, or the upn that belongs
            /// to the user. Examples: `user@example.com`, `@example.com`
            /// </param>
            /// <param name='tenantId'>
            /// The AAD tenantId of the user, disallowed for GatewayDevice role assignments
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<bool?> CheckAsync(this IRoleAssignments operations, string path, System.Guid userId, string accessType, string resourceType, string domain = "", System.Guid? tenantId = default(System.Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CheckWithHttpMessagesAsync(path, userId, accessType, resourceType, domain, tenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets role assignments under a given path
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path under which role assignments are searched
            /// </param>
            /// <param name='objectId'>
            /// Optional object id filter. This corresponds to an object id used in a role
            /// assignment creation.
            /// </param>
            /// <param name='personal'>
            /// Optionally make the search return only the role assignments that are
            /// applicable to the user sending the request
            /// </param>
            /// <param name='traverse'>
            /// Optionally specify if you want to recursively include children (Down) of
            /// the specified path. Other traversal directions are not supported. Possible
            /// values include: 'None', 'Down', 'Up', 'Span'
            /// </param>
            public static System.Collections.Generic.IList<RoleAssignmentRetrieve> Retrieve(this IRoleAssignments operations, string path, string objectId = default(string), bool? personal = default(bool?), string traverse = default(string))
            {
                return operations.RetrieveAsync(path, objectId, personal, traverse).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets role assignments under a given path
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// The path under which role assignments are searched
            /// </param>
            /// <param name='objectId'>
            /// Optional object id filter. This corresponds to an object id used in a role
            /// assignment creation.
            /// </param>
            /// <param name='personal'>
            /// Optionally make the search return only the role assignments that are
            /// applicable to the user sending the request
            /// </param>
            /// <param name='traverse'>
            /// Optionally specify if you want to recursively include children (Down) of
            /// the specified path. Other traversal directions are not supported. Possible
            /// values include: 'None', 'Down', 'Up', 'Span'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<RoleAssignmentRetrieve>> RetrieveAsync(this IRoleAssignments operations, string path, string objectId = default(string), bool? personal = default(bool?), string traverse = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveWithHttpMessagesAsync(path, objectId, personal, traverse, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a role assignment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='data'>
            /// The role assignment information.
            /// </param>
            public static System.Guid? Create(this IRoleAssignments operations, RoleAssignmentCreate data)
            {
                return operations.CreateAsync(data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a role assignment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='data'>
            /// The role assignment information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Guid?> CreateAsync(this IRoleAssignments operations, RoleAssignmentCreate data, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(data, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a role assignment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Role assignment id
            /// </param>
            public static void Delete(this IRoleAssignments operations, System.Guid id)
            {
                operations.DeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a role assignment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Role assignment id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this IRoleAssignments operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
