// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for KeyStores.
    /// </summary>
    public static partial class KeyStoresExtensions
    {
            /// <summary>
            /// Retrieves key stores
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='spaceId'>
            /// Optional filter on parent space id
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Space,Keys". Defaults
            /// to None. Possible values include: 'None', 'Description', 'FullPath',
            /// 'Keys', 'Space'
            /// </param>
            /// <param name='filter'>
            /// Odata Filter parameter
            /// </param>
            /// <param name='orderby'>
            /// Odata OrderBy parameter
            /// </param>
            /// <param name='skip'>
            /// Odata Skip parameter
            /// </param>
            /// <param name='top'>
            /// Odata Top parameter
            /// </param>
            public static System.Collections.Generic.IList<KeyStoreRetrieve> Retrieve(this IKeyStores operations, System.Guid? spaceId = default(System.Guid?), string includes = default(string), string filter = default(string), string orderby = default(string), int? skip = default(int?), int? top = default(int?))
            {
                return operations.RetrieveAsync(spaceId, includes, filter, orderby, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves key stores
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='spaceId'>
            /// Optional filter on parent space id
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Space,Keys". Defaults
            /// to None. Possible values include: 'None', 'Description', 'FullPath',
            /// 'Keys', 'Space'
            /// </param>
            /// <param name='filter'>
            /// Odata Filter parameter
            /// </param>
            /// <param name='orderby'>
            /// Odata OrderBy parameter
            /// </param>
            /// <param name='skip'>
            /// Odata Skip parameter
            /// </param>
            /// <param name='top'>
            /// Odata Top parameter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<KeyStoreRetrieve>> RetrieveAsync(this IKeyStores operations, System.Guid? spaceId = default(System.Guid?), string includes = default(string), string filter = default(string), string orderby = default(string), int? skip = default(int?), int? top = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveWithHttpMessagesAsync(spaceId, includes, filter, orderby, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a key store
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='data'>
            /// The store information
            /// </param>
            public static System.Guid? Create(this IKeyStores operations, KeyStoreCreate data)
            {
                return operations.CreateAsync(data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a key store
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='data'>
            /// The store information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Guid?> CreateAsync(this IKeyStores operations, KeyStoreCreate data, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(data, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a key store
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Space,Keys". Defaults
            /// to None. Possible values include: 'None', 'Description', 'FullPath',
            /// 'Keys', 'Space'
            /// </param>
            public static KeyStoreRetrieve RetrieveById(this IKeyStores operations, System.Guid id, string includes = default(string))
            {
                return operations.RetrieveByIdAsync(id, includes).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a key store
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Space,Keys". Defaults
            /// to None. Possible values include: 'None', 'Description', 'FullPath',
            /// 'Keys', 'Space'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KeyStoreRetrieve> RetrieveByIdAsync(this IKeyStores operations, System.Guid id, string includes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveByIdWithHttpMessagesAsync(id, includes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a key store
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier
            /// </param>
            public static void Delete(this IKeyStores operations, System.Guid id)
            {
                operations.DeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a key store
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this IKeyStores operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a key store
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier
            /// </param>
            /// <param name='data'>
            /// The store information
            /// </param>
            public static void Update(this IKeyStores operations, System.Guid id, KeyStoreUpdate data)
            {
                operations.UpdateAsync(id, data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a key store
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier
            /// </param>
            /// <param name='data'>
            /// The store information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task UpdateAsync(this IKeyStores operations, System.Guid id, KeyStoreUpdate data, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.UpdateWithHttpMessagesAsync(id, data, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves the store's keys
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier
            /// </param>
            public static System.Collections.Generic.IList<SecurityKeyRetrieve> RetrieveKeys(this IKeyStores operations, System.Guid id)
            {
                return operations.RetrieveKeysAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the store's keys
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<SecurityKeyRetrieve>> RetrieveKeysAsync(this IKeyStores operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveKeysWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The key store identifier
            /// </param>
            public static int? CreateKey(this IKeyStores operations, System.Guid id)
            {
                return operations.CreateKeyAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The key store identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<int?> CreateKeyAsync(this IKeyStores operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateKeyWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the given key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The key store identifier
            /// </param>
            /// <param name='key'>
            /// The key identifier
            /// </param>
            public static SecurityKeyRetrieve RetrieveKeyById(this IKeyStores operations, System.Guid id, int key)
            {
                return operations.RetrieveKeyByIdAsync(id, key).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the given key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The key store identifier
            /// </param>
            /// <param name='key'>
            /// The key identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SecurityKeyRetrieve> RetrieveKeyByIdAsync(this IKeyStores operations, System.Guid id, int key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveKeyByIdWithHttpMessagesAsync(id, key, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the given key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The store identifier
            /// </param>
            /// <param name='key'>
            /// The key identifier
            /// </param>
            public static void DeleteKey(this IKeyStores operations, System.Guid id, int key)
            {
                operations.DeleteKeyAsync(id, key).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the given key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The store identifier
            /// </param>
            /// <param name='key'>
            /// The key identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteKeyAsync(this IKeyStores operations, System.Guid id, int key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeleteKeyWithHttpMessagesAsync(id, key, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the given key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The store identifier
            /// </param>
            /// <param name='key'>
            /// The key identifier
            /// </param>
            /// <param name='data'>
            /// The key data
            /// </param>
            public static void UpdateKey(this IKeyStores operations, System.Guid id, int key, SecurityKeyUpdate data)
            {
                operations.UpdateKeyAsync(id, key, data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the given key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The store identifier
            /// </param>
            /// <param name='key'>
            /// The key identifier
            /// </param>
            /// <param name='data'>
            /// The key data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task UpdateKeyAsync(this IKeyStores operations, System.Guid id, int key, SecurityKeyUpdate data, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.UpdateKeyWithHttpMessagesAsync(id, key, data, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves the most recent valid key from the key store
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier
            /// </param>
            public static SecurityKeyRetrieve RetrieveKeysLast(this IKeyStores operations, System.Guid id)
            {
                return operations.RetrieveKeysLastAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the most recent valid key from the key store
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SecurityKeyRetrieve> RetrieveKeysLastAsync(this IKeyStores operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveKeysLastWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a token for the specified device using the specified key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The key store identifier
            /// </param>
            /// <param name='key'>
            /// The key identifier
            /// </param>
            /// <param name='deviceMac'>
            /// The device to generate the token for
            /// </param>
            public static string GenerateTokenFromKeyById(this IKeyStores operations, System.Guid id, int key, string deviceMac)
            {
                return operations.GenerateTokenFromKeyByIdAsync(id, key, deviceMac).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a token for the specified device using the specified key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The key store identifier
            /// </param>
            /// <param name='key'>
            /// The key identifier
            /// </param>
            /// <param name='deviceMac'>
            /// The device to generate the token for
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<string> GenerateTokenFromKeyByIdAsync(this IKeyStores operations, System.Guid id, int key, string deviceMac, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GenerateTokenFromKeyByIdWithHttpMessagesAsync(id, key, deviceMac, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a token for the specified device for the last valid key.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier
            /// </param>
            /// <param name='deviceMac'>
            /// The device to generate the token for
            /// </param>
            public static string GenerateTokenFromLastKey(this IKeyStores operations, System.Guid id, string deviceMac)
            {
                return operations.GenerateTokenFromLastKeyAsync(id, deviceMac).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a token for the specified device for the last valid key.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier
            /// </param>
            /// <param name='deviceMac'>
            /// The device to generate the token for
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<string> GenerateTokenFromLastKeyAsync(this IKeyStores operations, System.Guid id, string deviceMac, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GenerateTokenFromLastKeyWithHttpMessagesAsync(id, deviceMac, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
