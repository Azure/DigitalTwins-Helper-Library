// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Types.
    /// </summary>
    public static partial class TypesExtensions
    {
            /// <summary>
            /// Gets a list of extended types
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Optional ';' or ',' delimited list of ids to filter by
            /// </param>
            /// <param name='categories'>
            /// Optional ';' or ',' delimited list of categories to filter by
            /// </param>
            /// <param name='names'>
            /// Optional ';' or ',' delimited list of names to filter by
            /// </param>
            /// <param name='system'>
            /// Optionally filter on objects that have a parent space. If true, only return
            /// unparented (system) types. If false, only return parented (custom) types.
            /// </param>
            /// <param name='disabled'>
            /// Optional filter on the disabled flag
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Space". Defaults to
            /// None. Possible values include: 'None', 'Description', 'FullPath',
            /// 'Ontologies', 'Space'
            /// </param>
            /// <param name='spaceId'>
            /// Optionally filter on objects based on their location in the topology
            /// relative to the specified spaceId
            /// </param>
            /// <param name='traverse'>
            /// None (the default) for the specified spaceId only, Down for space and
            /// descendants, Up for spaceId and ancestors, Any for both. Possible values
            /// include: 'None', 'Down', 'Up', 'Span'
            /// </param>
            /// <param name='minLevel'>
            /// Optional filter on minimum level, inclusive
            /// </param>
            /// <param name='maxLevel'>
            /// Optional filter on maximum level, inclusive
            /// </param>
            /// <param name='minRelative'>
            /// Specify if min level is absolute or relative
            /// </param>
            /// <param name='maxRelative'>
            /// Specify if max level is absolute or relative
            /// </param>
            /// <param name='filter'>
            /// Odata Filter parameter
            /// </param>
            /// <param name='orderby'>
            /// Odata OrderBy parameter
            /// </param>
            /// <param name='skip'>
            /// Odata Skip parameter
            /// </param>
            /// <param name='top'>
            /// Odata Top parameter
            /// </param>
            public static System.Collections.Generic.IList<ExtendedTypeRetrieve> Retrieve(this ITypes operations, string ids = default(string), string categories = default(string), string names = default(string), bool? system = default(bool?), bool? disabled = default(bool?), string includes = default(string), System.Guid? spaceId = default(System.Guid?), string traverse = default(string), int? minLevel = default(int?), int? maxLevel = default(int?), bool? minRelative = default(bool?), bool? maxRelative = default(bool?), string filter = default(string), string orderby = default(string), int? skip = default(int?), int? top = default(int?))
            {
                return operations.RetrieveAsync(ids, categories, names, system, disabled, includes, spaceId, traverse, minLevel, maxLevel, minRelative, maxRelative, filter, orderby, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of extended types
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Optional ';' or ',' delimited list of ids to filter by
            /// </param>
            /// <param name='categories'>
            /// Optional ';' or ',' delimited list of categories to filter by
            /// </param>
            /// <param name='names'>
            /// Optional ';' or ',' delimited list of names to filter by
            /// </param>
            /// <param name='system'>
            /// Optionally filter on objects that have a parent space. If true, only return
            /// unparented (system) types. If false, only return parented (custom) types.
            /// </param>
            /// <param name='disabled'>
            /// Optional filter on the disabled flag
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Space". Defaults to
            /// None. Possible values include: 'None', 'Description', 'FullPath',
            /// 'Ontologies', 'Space'
            /// </param>
            /// <param name='spaceId'>
            /// Optionally filter on objects based on their location in the topology
            /// relative to the specified spaceId
            /// </param>
            /// <param name='traverse'>
            /// None (the default) for the specified spaceId only, Down for space and
            /// descendants, Up for spaceId and ancestors, Any for both. Possible values
            /// include: 'None', 'Down', 'Up', 'Span'
            /// </param>
            /// <param name='minLevel'>
            /// Optional filter on minimum level, inclusive
            /// </param>
            /// <param name='maxLevel'>
            /// Optional filter on maximum level, inclusive
            /// </param>
            /// <param name='minRelative'>
            /// Specify if min level is absolute or relative
            /// </param>
            /// <param name='maxRelative'>
            /// Specify if max level is absolute or relative
            /// </param>
            /// <param name='filter'>
            /// Odata Filter parameter
            /// </param>
            /// <param name='orderby'>
            /// Odata OrderBy parameter
            /// </param>
            /// <param name='skip'>
            /// Odata Skip parameter
            /// </param>
            /// <param name='top'>
            /// Odata Top parameter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<ExtendedTypeRetrieve>> RetrieveAsync(this ITypes operations, string ids = default(string), string categories = default(string), string names = default(string), bool? system = default(bool?), bool? disabled = default(bool?), string includes = default(string), System.Guid? spaceId = default(System.Guid?), string traverse = default(string), int? minLevel = default(int?), int? maxLevel = default(int?), bool? minRelative = default(bool?), bool? maxRelative = default(bool?), string filter = default(string), string orderby = default(string), int? skip = default(int?), int? top = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveWithHttpMessagesAsync(ids, categories, names, system, disabled, includes, spaceId, traverse, minLevel, maxLevel, minRelative, maxRelative, filter, orderby, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an extended type
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='data'>
            /// The type information
            /// </param>
            public static int? Create(this ITypes operations, ExtendedTypeCreate data)
            {
                return operations.CreateAsync(data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an extended type
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='data'>
            /// The type information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<int?> CreateAsync(this ITypes operations, ExtendedTypeCreate data, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(data, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a specific extended type
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Extended type id
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Space". Defaults to
            /// None. Possible values include: 'None', 'Description', 'FullPath',
            /// 'Ontologies', 'Space'
            /// </param>
            public static ExtendedTypeRetrieve RetrieveById(this ITypes operations, int id, string includes = default(string))
            {
                return operations.RetrieveByIdAsync(id, includes).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific extended type
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Extended type id
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Space". Defaults to
            /// None. Possible values include: 'None', 'Description', 'FullPath',
            /// 'Ontologies', 'Space'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ExtendedTypeRetrieve> RetrieveByIdAsync(this ITypes operations, int id, string includes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveByIdWithHttpMessagesAsync(id, includes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an extended type
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Extended type id
            /// </param>
            public static void Delete(this ITypes operations, int id)
            {
                operations.DeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an extended type
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Extended type id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this ITypes operations, int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates an extended type
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Extended type id
            /// </param>
            /// <param name='data'>
            /// Update payload
            /// </param>
            public static void Update(this ITypes operations, int id, ExtendedTypeUpdate data)
            {
                operations.UpdateAsync(id, data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an extended type
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Extended type id
            /// </param>
            /// <param name='data'>
            /// Update payload
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task UpdateAsync(this ITypes operations, int id, ExtendedTypeUpdate data, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.UpdateWithHttpMessagesAsync(id, data, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
