// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Endpoints.
    /// </summary>
    public static partial class EndpointsExtensions
    {
            /// <summary>
            /// Gets a list of endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='timeUpdated'>
            /// Minimum last updated UTC time
            /// </param>
            /// <param name='types'>
            /// Endpoint types
            /// </param>
            /// <param name='eventTypes'>
            /// Types of event
            /// </param>
            public static System.Collections.Generic.IList<EndpointRetrieve> Retrieve(this IEndpoints operations, System.DateTime? timeUpdated = default(System.DateTime?), string types = default(string), string eventTypes = default(string))
            {
                return operations.RetrieveAsync(timeUpdated, types, eventTypes).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='timeUpdated'>
            /// Minimum last updated UTC time
            /// </param>
            /// <param name='types'>
            /// Endpoint types
            /// </param>
            /// <param name='eventTypes'>
            /// Types of event
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<EndpointRetrieve>> RetrieveAsync(this IEndpoints operations, System.DateTime? timeUpdated = default(System.DateTime?), string types = default(string), string eventTypes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveWithHttpMessagesAsync(timeUpdated, types, eventTypes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an endpoint
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='data'>
            /// The endpoint information
            /// </param>
            public static System.Guid? Create(this IEndpoints operations, EndpointCreate data)
            {
                return operations.CreateAsync(data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an endpoint
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='data'>
            /// The endpoint information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Guid?> CreateAsync(this IEndpoints operations, EndpointCreate data, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(data, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a specific endpoint
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Endpoint Id
            /// </param>
            public static EndpointRetrieve RetrieveById(this IEndpoints operations, System.Guid id)
            {
                return operations.RetrieveByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific endpoint
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Endpoint Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<EndpointRetrieve> RetrieveByIdAsync(this IEndpoints operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Modifies an existing endpoint. Does not create if it doesn't exist.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Endpoint id
            /// </param>
            /// <param name='data'>
            /// Update payload
            /// </param>
            public static object Modify(this IEndpoints operations, System.Guid id, EndpointCreate data)
            {
                return operations.ModifyAsync(id, data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Modifies an existing endpoint. Does not create if it doesn't exist.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Endpoint id
            /// </param>
            /// <param name='data'>
            /// Update payload
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ModifyAsync(this IEndpoints operations, System.Guid id, EndpointCreate data, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ModifyWithHttpMessagesAsync(id, data, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified endpoint
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Endpoint Id
            /// </param>
            public static void Delete(this IEndpoints operations, System.Guid id)
            {
                operations.DeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified endpoint
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Endpoint Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this IEndpoints operations, System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
