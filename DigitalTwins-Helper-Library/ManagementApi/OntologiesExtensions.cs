// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ConnectedGridAccelerator.ManagementApi
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Ontologies.
    /// </summary>
    public static partial class OntologiesExtensions
    {
            /// <summary>
            /// Gets a list of ontologies
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='names'>
            /// Optional ';' or ',' delimited list of names to filter by
            /// </param>
            /// <param name='loaded'>
            /// Optional filter on the loaded flag
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Types". Defaults to
            /// None. Possible values include: 'None', 'Description', 'Types'
            /// </param>
            /// <param name='filter'>
            /// Odata Filter parameter
            /// </param>
            /// <param name='orderby'>
            /// Odata OrderBy parameter
            /// </param>
            /// <param name='skip'>
            /// Odata Skip parameter
            /// </param>
            /// <param name='top'>
            /// Odata Top parameter
            /// </param>
            public static System.Collections.Generic.IList<OntologyRetrieve> Retrieve(this IOntologies operations, string names = default(string), bool? loaded = default(bool?), string includes = default(string), string filter = default(string), string orderby = default(string), int? skip = default(int?), int? top = default(int?))
            {
                return operations.RetrieveAsync(names, loaded, includes, filter, orderby, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of ontologies
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='names'>
            /// Optional ';' or ',' delimited list of names to filter by
            /// </param>
            /// <param name='loaded'>
            /// Optional filter on the loaded flag
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Types". Defaults to
            /// None. Possible values include: 'None', 'Description', 'Types'
            /// </param>
            /// <param name='filter'>
            /// Odata Filter parameter
            /// </param>
            /// <param name='orderby'>
            /// Odata OrderBy parameter
            /// </param>
            /// <param name='skip'>
            /// Odata Skip parameter
            /// </param>
            /// <param name='top'>
            /// Odata Top parameter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<OntologyRetrieve>> RetrieveAsync(this IOntologies operations, string names = default(string), bool? loaded = default(bool?), string includes = default(string), string filter = default(string), string orderby = default(string), int? skip = default(int?), int? top = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveWithHttpMessagesAsync(names, loaded, includes, filter, orderby, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a specific ontology
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Ontology id
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Types". Defaults to
            /// None. Possible values include: 'None', 'Description', 'Types'
            /// </param>
            public static OntologyRetrieve RetrieveById(this IOntologies operations, int id, string includes = default(string))
            {
                return operations.RetrieveByIdAsync(id, includes).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific ontology
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Ontology id
            /// </param>
            /// <param name='includes'>
            /// Comma separated list of what to include, for example "Types". Defaults to
            /// None. Possible values include: 'None', 'Description', 'Types'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<OntologyRetrieve> RetrieveByIdAsync(this IOntologies operations, int id, string includes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RetrieveByIdWithHttpMessagesAsync(id, includes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an ontology
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Ontology id
            /// </param>
            /// <param name='data'>
            /// Update payload
            /// </param>
            public static void Update(this IOntologies operations, int id, OntologyUpdate data)
            {
                operations.UpdateAsync(id, data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an ontology
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Ontology id
            /// </param>
            /// <param name='data'>
            /// Update payload
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task UpdateAsync(this IOntologies operations, int id, OntologyUpdate data, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.UpdateWithHttpMessagesAsync(id, data, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
